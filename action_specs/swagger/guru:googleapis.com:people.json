{
  "type": "api",
  "key": "guru:googleapis.com:people",
  "info": {
    "contact": {
      "name": "Google",
      "url": "https://google.com"
    },
    "description": "The Google People API service gives access to information about profiles and contacts.",
    "title": "Google People",
    "version": "v1",
    "x-apiClientRegistration": {
      "url": "https://console.developers.google.com"
    },
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
    },
    "x-origin": {
      "format": "google",
      "url": "https://www.googleapis.com/discovery/v1/apis/people/v1/rest",
      "version": "v1"
    },
    "x-preferred": true,
    "x-providerName": "googleapis.com",
    "x-serviceName": "people"
  },
  "public": true,
  "swagger": {
    "swagger": "2.0",
    "schemes": [
      "https"
    ],
    "host": "people.googleapis.com",
    "basePath": "/",
    "info": {
      "contact": {
        "name": "Google",
        "url": "https://google.com"
      },
      "description": "The Google People API service gives access to information about profiles and contacts.",
      "title": "Google People",
      "version": "v1",
      "x-apiClientRegistration": {
        "url": "https://console.developers.google.com"
      },
      "x-logo": {
        "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
      },
      "x-origin": {
        "format": "google",
        "url": "https://www.googleapis.com/discovery/v1/apis/people/v1/rest",
        "version": "v1"
      },
      "x-preferred": true,
      "x-providerName": "googleapis.com",
      "x-serviceName": "people"
    },
    "externalDocs": {
      "url": "https://developers.google.com/people/"
    },
    "securityDefinitions": {
      "Oauth2": {
        "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
        "description": "Oauth 2.0 authentication",
        "flow": "implicit",
        "scopes": {
          "https://www.googleapis.com/auth/contacts": "Manage your contacts",
          "https://www.googleapis.com/auth/contacts.readonly": "View your contacts",
          "https://www.googleapis.com/auth/plus.login": "Know your basic profile info and list of people in your circles.",
          "https://www.googleapis.com/auth/user.addresses.read": "View your street addresses",
          "https://www.googleapis.com/auth/user.birthday.read": "View your complete date of birth",
          "https://www.googleapis.com/auth/user.emails.read": "View your email addresses",
          "https://www.googleapis.com/auth/user.phonenumbers.read": "View your phone numbers",
          "https://www.googleapis.com/auth/userinfo.email": "View your email address",
          "https://www.googleapis.com/auth/userinfo.profile": "View your basic profile info"
        },
        "type": "oauth2"
      }
    },
    "parameters": {
      "$.xgafv": {
        "description": "V1 error format.",
        "in": "query",
        "name": "$.xgafv",
        "type": "string"
      },
      "access_token": {
        "description": "OAuth access token.",
        "in": "query",
        "name": "access_token",
        "type": "string"
      },
      "alt": {
        "default": "json",
        "description": "Data format for response.",
        "in": "query",
        "name": "alt",
        "type": "string"
      },
      "bearer_token": {
        "description": "OAuth bearer token.",
        "in": "query",
        "name": "bearer_token",
        "type": "string"
      },
      "callback": {
        "description": "JSONP",
        "in": "query",
        "name": "callback",
        "type": "string"
      },
      "fields": {
        "description": "Selector specifying which fields to include in a partial response.",
        "in": "query",
        "name": "fields",
        "type": "string"
      },
      "key": {
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "in": "query",
        "name": "key",
        "type": "string"
      },
      "oauth_token": {
        "description": "OAuth 2.0 token for the current user.",
        "in": "query",
        "name": "oauth_token",
        "type": "string"
      },
      "pp": {
        "default": true,
        "description": "Pretty-print response.",
        "in": "query",
        "name": "pp",
        "type": "boolean"
      },
      "prettyPrint": {
        "default": true,
        "description": "Returns response with indentations and line breaks.",
        "in": "query",
        "name": "prettyPrint",
        "type": "boolean"
      },
      "quotaUser": {
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "in": "query",
        "name": "quotaUser",
        "type": "string"
      },
      "uploadType": {
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "in": "query",
        "name": "uploadType",
        "type": "string"
      },
      "upload_protocol": {
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "in": "query",
        "name": "upload_protocol",
        "type": "string"
      }
    },
    "tags": [
      {
        "name": "people"
      }
    ],
    "paths": {
      "/v1/people:batchGet": {
        "get": {
          "description": "Provides information about a list of specific people by specifying a list of requested resource names. Use `people/me` to indicate the authenticated user.",
          "operationId": "people.people.getBatchGet",
          "parameters": [
            {
              "collectionFormat": "multi",
              "description": "The resource name, such as one returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list), of one of the people to provide information about. You can include this parameter up to 50 times in one request.",
              "in": "query",
              "items": {
                "type": "string"
              },
              "name": "resourceNames",
              "type": "array"
            },
            {
              "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
              "in": "query",
              "name": "requestMask.includeField",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "schema": {
                "$ref": "#/definitions/GetPeopleResponse"
              }
            }
          },
          "security": [
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/contacts"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/contacts.readonly"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/plus.login"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/user.addresses.read"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/user.birthday.read"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/user.emails.read"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/user.phonenumbers.read"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/userinfo.profile"
              ]
            }
          ],
          "tags": [
            "people"
          ]
        },
        "parameters": [
          {
            "$ref": "#/parameters/access_token"
          },
          {
            "$ref": "#/parameters/alt"
          },
          {
            "$ref": "#/parameters/bearer_token"
          },
          {
            "$ref": "#/parameters/callback"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/key"
          },
          {
            "$ref": "#/parameters/oauth_token"
          },
          {
            "$ref": "#/parameters/pp"
          },
          {
            "$ref": "#/parameters/prettyPrint"
          },
          {
            "$ref": "#/parameters/quotaUser"
          },
          {
            "$ref": "#/parameters/upload_protocol"
          },
          {
            "$ref": "#/parameters/uploadType"
          },
          {
            "$ref": "#/parameters/$.xgafv"
          }
        ]
      },
      "/v1/{resourceName}": {
        "get": {
          "description": "Provides information about a person resource for a resource name. Use `people/me` to indicate the authenticated user.",
          "operationId": "people.people.get",
          "parameters": [
            {
              "description": "The resource name of the person to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about any user, specify the resource name that identifies the user, such as the resource names returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list).",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-reservedExpansion": true
            },
            {
              "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
              "in": "query",
              "name": "requestMask.includeField",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "schema": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "security": [
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/contacts"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/contacts.readonly"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/plus.login"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/user.addresses.read"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/user.birthday.read"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/user.emails.read"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/user.phonenumbers.read"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/userinfo.profile"
              ]
            }
          ],
          "tags": [
            "people"
          ]
        },
        "parameters": [
          {
            "$ref": "#/parameters/access_token"
          },
          {
            "$ref": "#/parameters/alt"
          },
          {
            "$ref": "#/parameters/bearer_token"
          },
          {
            "$ref": "#/parameters/callback"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/key"
          },
          {
            "$ref": "#/parameters/oauth_token"
          },
          {
            "$ref": "#/parameters/pp"
          },
          {
            "$ref": "#/parameters/prettyPrint"
          },
          {
            "$ref": "#/parameters/quotaUser"
          },
          {
            "$ref": "#/parameters/upload_protocol"
          },
          {
            "$ref": "#/parameters/uploadType"
          },
          {
            "$ref": "#/parameters/$.xgafv"
          }
        ]
      },
      "/v1/{resourceName}/connections": {
        "get": {
          "description": "Provides a list of the authenticated user's contacts merged with any linked profiles.",
          "operationId": "people.people.connections.list",
          "parameters": [
            {
              "description": "The resource name to return connections for. Only `people/me` is valid.",
              "in": "path",
              "name": "resourceName",
              "required": true,
              "type": "string",
              "x-reservedExpansion": true
            },
            {
              "description": "The token of the page to be returned.",
              "in": "query",
              "name": "pageToken",
              "type": "string"
            },
            {
              "description": "The number of connections to include in the response. Valid values are between 1 and 500, inclusive. Defaults to 100.",
              "in": "query",
              "name": "pageSize",
              "type": "integer"
            },
            {
              "description": "The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`.",
              "enum": [
                "LAST_MODIFIED_ASCENDING",
                "FIRST_NAME_ASCENDING",
                "LAST_NAME_ASCENDING"
              ],
              "in": "query",
              "name": "sortOrder",
              "type": "string"
            },
            {
              "description": "A sync token, returned by a previous call to `people.connections.list`. Only resources changed since the sync token was created are returned.",
              "in": "query",
              "name": "syncToken",
              "type": "string"
            },
            {
              "description": "Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
              "in": "query",
              "name": "requestMask.includeField",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "schema": {
                "$ref": "#/definitions/ListConnectionsResponse"
              }
            }
          },
          "security": [
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/contacts"
              ]
            },
            {
              "Oauth2": [
                "https://www.googleapis.com/auth/contacts.readonly"
              ]
            }
          ],
          "tags": [
            "people"
          ]
        },
        "parameters": [
          {
            "$ref": "#/parameters/access_token"
          },
          {
            "$ref": "#/parameters/alt"
          },
          {
            "$ref": "#/parameters/bearer_token"
          },
          {
            "$ref": "#/parameters/callback"
          },
          {
            "$ref": "#/parameters/fields"
          },
          {
            "$ref": "#/parameters/key"
          },
          {
            "$ref": "#/parameters/oauth_token"
          },
          {
            "$ref": "#/parameters/pp"
          },
          {
            "$ref": "#/parameters/prettyPrint"
          },
          {
            "$ref": "#/parameters/quotaUser"
          },
          {
            "$ref": "#/parameters/upload_protocol"
          },
          {
            "$ref": "#/parameters/uploadType"
          },
          {
            "$ref": "#/parameters/$.xgafv"
          }
        ]
      }
    },
    "definitions": {
      "Address": {
        "description": "A person's physical address. May be a P.O. box or street address. All fields are optional.",
        "properties": {
          "city": {
            "description": "The city of the address.",
            "type": "string"
          },
          "country": {
            "description": "The country of the address.",
            "type": "string"
          },
          "countryCode": {
            "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.",
            "type": "string"
          },
          "extendedAddress": {
            "description": "The extended address of the address; for example, the apartment number.",
            "type": "string"
          },
          "formattedType": {
            "description": "The read-only type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "formattedValue": {
            "description": "The read-only value of the address formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the address."
          },
          "poBox": {
            "description": "The P.O. box of the address.",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address.",
            "type": "string"
          },
          "region": {
            "description": "The region of the address; for example, the state or province.",
            "type": "string"
          },
          "streetAddress": {
            "description": "The street address.",
            "type": "string"
          },
          "type": {
            "description": "The type of the address. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Biography": {
        "description": "A person's short biography.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the biography."
          },
          "value": {
            "description": "The short biography.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Birthday": {
        "description": "A person's birthday. At least one of the `date` and `text` fields are specified. The `date` and `text` fields typically represent the same date, but are not guaranteed to.",
        "properties": {
          "date": {
            "$ref": "#/definitions/Date",
            "description": "The date of the birthday."
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the birthday."
          },
          "text": {
            "description": "A free-form string representing the user's birthday.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BraggingRights": {
        "description": "A person's bragging rights.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the bragging rights."
          },
          "value": {
            "description": "The bragging rights; for example, `climbed mount everest`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContactGroupMembership": {
        "description": "A Google contact group membership.",
        "properties": {
          "contactGroupId": {
            "description": "The contact group ID for the contact group membership. The contact group ID can be custom or predefined. Possible values include, but are not limited to, the following: * `myContacts` * `starred` * A numerical ID for user-created groups.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CoverPhoto": {
        "description": "A person's cover photo. A large image shown on the person's profile page that represents who they are or what they care about.",
        "properties": {
          "default": {
            "description": "True if the cover photo is the default cover photo; false if the cover photo is a user-provided cover photo.",
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the cover photo."
          },
          "url": {
            "description": "The URL of the cover photo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Date": {
        "description": "Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The day may be 0 to represent a year and month where the day is not significant. The year may be 0 to represent a month and day independent of year; for example, anniversary date.",
        "properties": {
          "day": {
            "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year/month where the day is not significant.",
            "format": "int32",
            "type": "integer"
          },
          "month": {
            "description": "Month of year. Must be from 1 to 12.",
            "format": "int32",
            "type": "integer"
          },
          "year": {
            "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DomainMembership": {
        "description": "A Google Apps Domain membership.",
        "properties": {
          "inViewerDomain": {
            "description": "True if the person is in the viewer's Google Apps domain.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EmailAddress": {
        "description": "A person's email address.",
        "properties": {
          "formattedType": {
            "description": "The read-only type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the email address."
          },
          "type": {
            "description": "The type of the email address. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`",
            "type": "string"
          },
          "value": {
            "description": "The email address.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Event": {
        "description": "An event related to the person.",
        "properties": {
          "date": {
            "$ref": "#/definitions/Date",
            "description": "The date of the event."
          },
          "formattedType": {
            "description": "The read-only type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the event."
          },
          "type": {
            "description": "The type of the event. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `anniversary` * `other`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldMetadata": {
        "description": "Metadata about a field.",
        "properties": {
          "primary": {
            "description": "True if the field is the primary field; false if the field is a secondary field.",
            "type": "boolean"
          },
          "source": {
            "$ref": "#/definitions/Source",
            "description": "The source of the field."
          },
          "verified": {
            "description": "True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Gender": {
        "description": "A person's gender.",
        "properties": {
          "formattedValue": {
            "description": "The read-only value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the gender."
          },
          "value": {
            "description": "The gender for the person. The gender can be custom or predefined. Possible values include, but are not limited to, the following: * `male` * `female` * `other` * `unknown`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetPeopleResponse": {
        "properties": {
          "responses": {
            "description": "The response for each requested resource name.",
            "items": {
              "$ref": "#/definitions/PersonResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ImClient": {
        "description": "A person's instant messaging client.",
        "properties": {
          "formattedProtocol": {
            "description": "The read-only protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "formattedType": {
            "description": "The read-only type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the IM client."
          },
          "protocol": {
            "description": "The protocol of the IM client. The protocol can be custom or predefined. Possible values include, but are not limited to, the following: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`",
            "type": "string"
          },
          "type": {
            "description": "The type of the IM client. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`",
            "type": "string"
          },
          "username": {
            "description": "The user name used in the IM client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Interest": {
        "description": "One of the person's interests.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the interest."
          },
          "value": {
            "description": "The interest; for example, `stargazing`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListConnectionsResponse": {
        "properties": {
          "connections": {
            "description": "The list of people that the requestor is connected to.",
            "items": {
              "$ref": "#/definitions/Person"
            },
            "type": "array"
          },
          "nextPageToken": {
            "description": "The token that can be used to retrieve the next page of results.",
            "type": "string"
          },
          "nextSyncToken": {
            "description": "The token that can be used to retrieve changes since the last request.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Locale": {
        "description": "A person's locale preference.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the locale."
          },
          "value": {
            "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Membership": {
        "description": "A person's membership in a group.",
        "properties": {
          "contactGroupMembership": {
            "$ref": "#/definitions/ContactGroupMembership",
            "description": "The contact group membership."
          },
          "domainMembership": {
            "$ref": "#/definitions/DomainMembership",
            "description": "The domain membership."
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the membership."
          }
        },
        "type": "object"
      },
      "Name": {
        "description": "A person's name. If the name is a mononym, the family name is empty.",
        "properties": {
          "displayName": {
            "description": "The display name formatted according to the locale specified by the viewer's account or the Accept-Language HTTP header.",
            "type": "string"
          },
          "familyName": {
            "description": "The family name.",
            "type": "string"
          },
          "givenName": {
            "description": "The given name.",
            "type": "string"
          },
          "honorificPrefix": {
            "description": "The honorific prefixes, such as `Mrs.` or `Dr.`",
            "type": "string"
          },
          "honorificSuffix": {
            "description": "The honorific suffixes, such as `Jr.`",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the name."
          },
          "middleName": {
            "description": "The middle name(s).",
            "type": "string"
          },
          "phoneticFamilyName": {
            "description": "The family name spelled as it sounds.",
            "type": "string"
          },
          "phoneticGivenName": {
            "description": "The given name spelled as it sounds.",
            "type": "string"
          },
          "phoneticHonorificPrefix": {
            "description": "The honorific prefixes spelled as they sound.",
            "type": "string"
          },
          "phoneticHonorificSuffix": {
            "description": "The honorific suffixes spelled as they sound.",
            "type": "string"
          },
          "phoneticMiddleName": {
            "description": "The middle name(s) spelled as they sound.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Nickname": {
        "description": "A person's nickname.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the nickname."
          },
          "type": {
            "description": "The type of the nickname.",
            "enum": [
              "DEFAULT",
              "MAIDEN_NAME",
              "INITIALS",
              "GPLUS",
              "OTHER_NAME"
            ],
            "type": "string"
          },
          "value": {
            "description": "The nickname.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Occupation": {
        "description": "A person's occupation.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the occupation."
          },
          "value": {
            "description": "The occupation; for example, `carpenter`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Organization": {
        "description": "A person's past or current organization. Overlapping date ranges are permitted.",
        "properties": {
          "current": {
            "description": "True if the organization is the person's current organization; false if the organization is a past organization.",
            "type": "boolean"
          },
          "department": {
            "description": "The person's department at the organization.",
            "type": "string"
          },
          "domain": {
            "description": "The domain name associated with the organization; for example, `google.com`.",
            "type": "string"
          },
          "endDate": {
            "$ref": "#/definitions/Date",
            "description": "The end date when the person left the organization."
          },
          "formattedType": {
            "description": "The read-only type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "jobDescription": {
            "description": "The person's job description at the organization.",
            "type": "string"
          },
          "location": {
            "description": "The location of the organization office the person works at.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the organization."
          },
          "name": {
            "description": "The name of the organization.",
            "type": "string"
          },
          "phoneticName": {
            "description": "The phonetic name of the organization.",
            "type": "string"
          },
          "startDate": {
            "$ref": "#/definitions/Date",
            "description": "The start date when the person joined the organization."
          },
          "symbol": {
            "description": "The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.",
            "type": "string"
          },
          "title": {
            "description": "The person's job title at the organization.",
            "type": "string"
          },
          "type": {
            "description": "The type of the organization. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `work` * `school`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Person": {
        "description": "Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Fields other than IDs, metadata, and group memberships are user-edited. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.",
        "properties": {
          "addresses": {
            "description": "The person's street addresses.",
            "items": {
              "$ref": "#/definitions/Address"
            },
            "type": "array"
          },
          "ageRange": {
            "description": "The person's age range.",
            "enum": [
              "AGE_RANGE_UNSPECIFIED",
              "LESS_THAN_EIGHTEEN",
              "EIGHTEEN_TO_TWENTY",
              "TWENTY_ONE_OR_OLDER"
            ],
            "type": "string"
          },
          "biographies": {
            "description": "The person's biographies.",
            "items": {
              "$ref": "#/definitions/Biography"
            },
            "type": "array"
          },
          "birthdays": {
            "description": "The person's birthdays.",
            "items": {
              "$ref": "#/definitions/Birthday"
            },
            "type": "array"
          },
          "braggingRights": {
            "description": "The person's bragging rights.",
            "items": {
              "$ref": "#/definitions/BraggingRights"
            },
            "type": "array"
          },
          "coverPhotos": {
            "description": "The person's cover photos.",
            "items": {
              "$ref": "#/definitions/CoverPhoto"
            },
            "type": "array"
          },
          "emailAddresses": {
            "description": "The person's email addresses.",
            "items": {
              "$ref": "#/definitions/EmailAddress"
            },
            "type": "array"
          },
          "etag": {
            "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.",
            "type": "string"
          },
          "events": {
            "description": "The person's events.",
            "items": {
              "$ref": "#/definitions/Event"
            },
            "type": "array"
          },
          "genders": {
            "description": "The person's genders.",
            "items": {
              "$ref": "#/definitions/Gender"
            },
            "type": "array"
          },
          "imClients": {
            "description": "The person's instant messaging clients.",
            "items": {
              "$ref": "#/definitions/ImClient"
            },
            "type": "array"
          },
          "interests": {
            "description": "The person's interests.",
            "items": {
              "$ref": "#/definitions/Interest"
            },
            "type": "array"
          },
          "locales": {
            "description": "The person's locale preferences.",
            "items": {
              "$ref": "#/definitions/Locale"
            },
            "type": "array"
          },
          "memberships": {
            "description": "The person's group memberships.",
            "items": {
              "$ref": "#/definitions/Membership"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/definitions/PersonMetadata",
            "description": "Metadata about the person."
          },
          "names": {
            "description": "The person's names.",
            "items": {
              "$ref": "#/definitions/Name"
            },
            "type": "array"
          },
          "nicknames": {
            "description": "The person's nicknames.",
            "items": {
              "$ref": "#/definitions/Nickname"
            },
            "type": "array"
          },
          "occupations": {
            "description": "The person's occupations.",
            "items": {
              "$ref": "#/definitions/Occupation"
            },
            "type": "array"
          },
          "organizations": {
            "description": "The person's past or current organizations.",
            "items": {
              "$ref": "#/definitions/Organization"
            },
            "type": "array"
          },
          "phoneNumbers": {
            "description": "The person's phone numbers.",
            "items": {
              "$ref": "#/definitions/PhoneNumber"
            },
            "type": "array"
          },
          "photos": {
            "description": "The person's photos.",
            "items": {
              "$ref": "#/definitions/Photo"
            },
            "type": "array"
          },
          "relations": {
            "description": "The person's relations.",
            "items": {
              "$ref": "#/definitions/Relation"
            },
            "type": "array"
          },
          "relationshipInterests": {
            "description": "The kind of relationship the person is looking for.",
            "items": {
              "$ref": "#/definitions/RelationshipInterest"
            },
            "type": "array"
          },
          "relationshipStatuses": {
            "description": "The person's relationship statuses.",
            "items": {
              "$ref": "#/definitions/RelationshipStatus"
            },
            "type": "array"
          },
          "residences": {
            "description": "The person's residences.",
            "items": {
              "$ref": "#/definitions/Residence"
            },
            "type": "array"
          },
          "resourceName": {
            "description": "The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters. Always starts with `people/`.",
            "type": "string"
          },
          "skills": {
            "description": "The person's skills.",
            "items": {
              "$ref": "#/definitions/Skill"
            },
            "type": "array"
          },
          "taglines": {
            "description": "The person's taglines.",
            "items": {
              "$ref": "#/definitions/Tagline"
            },
            "type": "array"
          },
          "urls": {
            "description": "The person's associated URLs.",
            "items": {
              "$ref": "#/definitions/Url"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PersonMetadata": {
        "description": "Metadata about a person.",
        "properties": {
          "deleted": {
            "description": "True if the person resource has been deleted. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token.",
            "type": "boolean"
          },
          "objectType": {
            "description": "The type of the person object.",
            "enum": [
              "OBJECT_TYPE_UNSPECIFIED",
              "PERSON",
              "PAGE"
            ],
            "type": "string"
          },
          "previousResourceNames": {
            "description": "Any former resource names this person has had. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sources": {
            "description": "The sources of data for the person.",
            "items": {
              "$ref": "#/definitions/Source"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PersonResponse": {
        "description": "The response for a single person",
        "properties": {
          "httpStatusCode": {
            "description": "[HTTP 1.1 status code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).",
            "format": "int32",
            "type": "integer"
          },
          "person": {
            "$ref": "#/definitions/Person",
            "description": "The person."
          },
          "requestedResourceName": {
            "description": "The original requested resource name. May be different than the resource name on the returned person. The resource name can change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or a profile URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PhoneNumber": {
        "description": "A person's phone number.",
        "properties": {
          "canonicalForm": {
            "description": "The read-only canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number.",
            "type": "string"
          },
          "formattedType": {
            "description": "The read-only type of the phone number translated and formatted in the viewer's account locale or the the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the phone number."
          },
          "type": {
            "description": "The type of the phone number. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`",
            "type": "string"
          },
          "value": {
            "description": "The phone number.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Photo": {
        "description": "A person's photo. A picture shown next to the person's name to help others recognize the person.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the photo."
          },
          "url": {
            "description": "The URL of the photo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Relation": {
        "description": "A person's relation to another person.",
        "properties": {
          "formattedType": {
            "description": "The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the relation."
          },
          "person": {
            "description": "The name of the other person this relation refers to.",
            "type": "string"
          },
          "type": {
            "description": "The person's relation to the other person. The type can be custom or predefined. Possible values include, but are not limited to, the following values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipInterest": {
        "description": "The kind of relationship the person is looking for.",
        "properties": {
          "formattedValue": {
            "description": "The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the relationship interest."
          },
          "value": {
            "description": "The kind of relationship the person is looking for. The value can be custom or predefined. Possible values include, but are not limited to, the following values: * `friend` * `date` * `relationship` * `networking`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipStatus": {
        "description": "A person's relationship status.",
        "properties": {
          "formattedValue": {
            "description": "The read-only value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the relationship status."
          },
          "value": {
            "description": "The relationship status. The value can be custom or predefined. Possible values include, but are not limited to, the following: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Residence": {
        "description": "A person's past or current residence.",
        "properties": {
          "current": {
            "description": "True if the residence is the person's current residence; false if the residence is a past residence.",
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the residence."
          },
          "value": {
            "description": "The address of the residence.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Skill": {
        "description": "A skill that the person has.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the skill."
          },
          "value": {
            "description": "The skill; for example, `underwater basket weaving`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "The source of a field.",
        "properties": {
          "id": {
            "description": "A unique identifier within the source type generated by the server.",
            "type": "string"
          },
          "type": {
            "description": "The source type.",
            "enum": [
              "OTHER",
              "ACCOUNT",
              "PROFILE",
              "DOMAIN_PROFILE",
              "CONTACT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Tagline": {
        "description": "A brief one-line description of the person.",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the tagline."
          },
          "value": {
            "description": "The tagline.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Url": {
        "description": "A person's associated URLs.",
        "properties": {
          "formattedType": {
            "description": "The read-only type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/definitions/FieldMetadata",
            "description": "Metadata about the URL."
          },
          "type": {
            "description": "The type of the URL. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Google+ application. * `other`",
            "type": "string"
          },
          "value": {
            "description": "The URL.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  }
}