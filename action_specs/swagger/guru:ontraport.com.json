{
  "type": "api",
  "key": "guru:ontraport.com",
  "info": {
    "contact": {
      "email": "support@ontraport.com",
      "name": "The ONTRAPORT Engineering Team",
      "url": "http://support.ontraport.com/"
    },
    "description": "<p>Enter your App ID and API Key above. If you do not have an App ID or API Key login to your ONTRAPORT account and navigate <a href=\"https://app.ontraport.com/#!/api_settings/listAll\">here</a>. Authentication parameters must be sent in the request header as <strong>Api-Appid</strong> and <strong>Api-Key</strong>. Each ONTRAPORT account is allowed up to 180 requests per minute.</p>",
    "termsOfService": "https://ontraport.com/terms-of-service",
    "title": "ONTRAPORT",
    "version": "1.2.1",
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_ontraport.com_assets_images_ONTRAPORT_logo_150px.png"
    },
    "x-origin": {
      "format": "swagger",
      "url": "https://api.ontraport.com/1/api-docs/swagger.json",
      "version": "2.0"
    },
    "x-preferred": true,
    "x-providerName": "ontraport.com"
  },
  "public": true,
  "swagger": {
    "swagger": "2.0",
    "schemes": [
      "https"
    ],
    "host": "api.ontraport.com",
    "basePath": "/1",
    "info": {
      "contact": {
        "email": "support@ontraport.com",
        "name": "The ONTRAPORT Engineering Team",
        "url": "http://support.ontraport.com/"
      },
      "description": "<p>Enter your App ID and API Key above. If you do not have an App ID or API Key login to your ONTRAPORT account and navigate <a href=\"https://app.ontraport.com/#!/api_settings/listAll\">here</a>. Authentication parameters must be sent in the request header as <strong>Api-Appid</strong> and <strong>Api-Key</strong>. Each ONTRAPORT account is allowed up to 180 requests per minute.</p>",
      "termsOfService": "https://ontraport.com/terms-of-service",
      "title": "ONTRAPORT",
      "version": "1.2.1",
      "x-logo": {
        "url": "https://api.apis.guru/v2/cache/logo/https_ontraport.com_assets_images_ONTRAPORT_logo_150px.png"
      },
      "x-origin": {
        "format": "swagger",
        "url": "https://api.ontraport.com/1/api-docs/swagger.json",
        "version": "2.0"
      },
      "x-preferred": true,
      "x-providerName": "ontraport.com"
    },
    "externalDocs": {
      "url": "https://ontraport.com/ontraport-api"
    },
    "produces": [
      "application/json"
    ],
    "parameters": {
      "addListParamFormData": {
        "description": "Array of Tag IDs as comma-delimited list.",
        "in": "formData",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "name": "add_list",
        "required": true,
        "type": "array"
      },
      "bmasksParam": {
        "description": "???",
        "format": "int32",
        "in": "query",
        "name": "bmasks",
        "type": "integer"
      },
      "bmasksParamFormData": {
        "description": "???",
        "format": "int32",
        "in": "formData",
        "name": "bmasks",
        "type": "integer"
      },
      "conditionParam": {
        "description": "Apply this condition to the collection query. This is essentially like a SQL WHERE clause, e.g. firstname='Ben'",
        "in": "query",
        "name": "condition",
        "type": "string"
      },
      "conditionParamFormData": {
        "description": "Apply this condition to the collection query. This is essentially like a SQL WHERE clause, e.g. firstname='Ben'",
        "in": "formData",
        "name": "condition",
        "type": "string"
      },
      "date_rangeParam": {
        "description": "Start and End dates to search, in seconds since Jan 1, 1970, as a comma-separated list. Start (index 0 in the array) is inclusive, End (index 1) is exclusive. Either or both can be empty.",
        "in": "query",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "name": "date_range",
        "type": "array"
      },
      "date_rangeParamFormData": {
        "description": "Start and End dates to search, in seconds since Jan 1, 1970, as a comma-separated list. Start (index 0 in the array) is inclusive, End (index 1) is exclusive. Either or both can be empty.",
        "in": "formData",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "name": "date_range",
        "type": "array"
      },
      "dupeParam": {
        "description": "???",
        "in": "query",
        "name": "dupe",
        "type": "string"
      },
      "dupeParamFormData": {
        "description": "???",
        "in": "formData",
        "name": "dupe",
        "type": "string"
      },
      "externsParam": {
        "description": "External fields to include in results",
        "in": "query",
        "name": "externs",
        "type": "string"
      },
      "externsParamFormData": {
        "description": "External fields to include in results",
        "in": "formData",
        "name": "externs",
        "type": "string"
      },
      "group_idsParam": {
        "description": "Array of Group ID for Object type as comma-delimited list",
        "in": "query",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "name": "group_ids",
        "type": "array"
      },
      "group_idsParamFormData": {
        "description": "Array of Group ID for Object type as comma-delimited list",
        "in": "formData",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "name": "group_ids",
        "type": "array"
      },
      "idParam": {
        "description": "ID of Object.",
        "format": "int32",
        "in": "query",
        "name": "id",
        "required": true,
        "type": "integer"
      },
      "idParamFormData": {
        "description": "ID of Object.",
        "format": "int32",
        "in": "formData",
        "name": "id",
        "required": true,
        "type": "integer"
      },
      "idsParam": {
        "description": "Array of Object IDs as comma-delimited list.",
        "in": "query",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "name": "ids",
        "type": "array"
      },
      "idsParamFormData": {
        "description": "Array of Object IDs as comma-delimited list.",
        "in": "formData",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "name": "ids",
        "type": "array"
      },
      "listFieldsParam": {
        "description": "Array of fields to return in response as comma-delimited list.",
        "in": "query",
        "items": {
          "type": "string"
        },
        "name": "listFields",
        "type": "array"
      },
      "listFieldsParamFormData": {
        "description": "Array of fields to return in response as comma-delimited list.",
        "in": "formData",
        "items": {
          "type": "string"
        },
        "name": "listFields",
        "type": "array"
      },
      "objectIdParam": {
        "description": "Object Type ID.",
        "format": "int32",
        "in": "query",
        "name": "objectID",
        "required": true,
        "type": "integer"
      },
      "objectIdParamFormData": {
        "description": "Object Type ID.",
        "format": "int32",
        "in": "formData",
        "name": "objectID",
        "required": true,
        "type": "integer"
      },
      "object_type_idParam": {
        "description": "Return results pertaining only to this Object type ID",
        "format": "int32",
        "in": "query",
        "name": "object_type_id",
        "type": "integer"
      },
      "object_type_idParamFormData": {
        "description": "Return results pertaining only to this Object type ID",
        "format": "int32",
        "in": "formData",
        "name": "object_type_id",
        "type": "integer"
      },
      "rangeParam": {
        "description": "Number of results to return (maximum=50)",
        "format": "int32",
        "in": "query",
        "maximum": 50,
        "name": "range",
        "type": "integer"
      },
      "rangeParamFormData": {
        "description": "Number of results to return (maximum=50)",
        "format": "int32",
        "in": "formData",
        "maximum": 50,
        "name": "range",
        "type": "integer"
      },
      "removeListParamFormData": {
        "description": "Array of Tag IDs as comma-delimited list.",
        "in": "formData",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "name": "remove_list",
        "required": true,
        "type": "array"
      },
      "searchNotesParam": {
        "description": "Boolean flag to additionally search Object Notes for the Search term given in Search parameter",
        "in": "query",
        "name": "searchNotes",
        "type": "boolean"
      },
      "searchNotesParamFormData": {
        "description": "Boolean flag to additionally search Object Notes for the Search term given in Search parameter",
        "in": "formData",
        "name": "searchNotes",
        "type": "boolean"
      },
      "searchParam": {
        "description": "Search Objects for this string",
        "in": "query",
        "name": "search",
        "type": "string"
      },
      "searchParamFormData": {
        "description": "Search objects for this string",
        "in": "formData",
        "name": "search",
        "type": "string"
      },
      "search_fieldsParam": {
        "default": false,
        "description": "???",
        "in": "query",
        "name": "search_fields",
        "type": "boolean"
      },
      "search_fieldsParamFormData": {
        "default": false,
        "description": "???",
        "in": "formData",
        "name": "search_fields",
        "type": "boolean"
      },
      "sortDirParam": {
        "description": "Sort direction, must be used in conjunction with <b>sort</b> parameter.",
        "enum": [
          "asc",
          "desc"
        ],
        "in": "query",
        "name": "sortDir",
        "type": "string"
      },
      "sortDirParamFormData": {
        "description": "Sort direction, must be used in conjunction with <b>sort</b> parameter.",
        "enum": [
          "asc",
          "desc"
        ],
        "in": "formData",
        "name": "sortDir",
        "type": "string"
      },
      "sortDispParam": {
        "description": "???",
        "in": "query",
        "name": "sortDisp",
        "type": "string"
      },
      "sortDispParamFormData": {
        "description": "???",
        "in": "formData",
        "name": "sortDisp",
        "type": "string"
      },
      "sortParam": {
        "description": "Field used to sort results",
        "in": "query",
        "name": "sort",
        "type": "string"
      },
      "sortParamFormData": {
        "description": "Field used to sort results",
        "in": "formData",
        "name": "sort",
        "type": "string"
      },
      "startParam": {
        "description": "Return results starting at this offset",
        "format": "int32",
        "in": "query",
        "name": "start",
        "type": "integer"
      },
      "startParamFormData": {
        "description": "Return results starting at this offset",
        "format": "int32",
        "in": "formData",
        "name": "start",
        "type": "integer"
      }
    },
    "responses": {
      "default": {
        "description": "Standard response object",
        "schema": {
          "items": {
            "$ref": "#/definitions/Response"
          }
        }
      }
    },
    "tags": [
      {
        "description": "Create, update, fetch, and delete Contacts or other Objects",
        "name": "object"
      },
      {
        "description": "Fetch Form content",
        "name": "form"
      },
      {
        "description": "Create, update, or fetch Email, SMS, or other Message content",
        "name": "message"
      },
      {
        "description": "Cancel and complete Tasks",
        "name": "task"
      },
      {
        "description": "Everything to do with payment Transactions",
        "name": "transaction"
      },
      {
        "description": "Fetch Landing Page content",
        "name": "landingPage"
      }
    ],
    "paths": {
      "/form": {
        "get": {
          "description": "This will fetch a Form's HTML for a given ID.<br/><b>Note</b>: HTML is returned in the <code>data</code> member of the JSON response. As a result, the HTML is escaped and you will have to unescape the HTML before using it.",
          "operationId": "getForm",
          "parameters": [
            {
              "$ref": "#/parameters/idParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "404": {
              "description": "Form not found"
            }
          },
          "summary": "This will get an existing Form",
          "tags": [
            "forms"
          ]
        }
      },
      "/landingPage/getHostedURL": {
        "get": {
          "description": "This will grab the permanent URL for a given Landing Page.",
          "operationId": "getHostedURL",
          "parameters": [
            {
              "$ref": "#/parameters/idParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully got URL",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error processing transaction"
            }
          },
          "summary": "Grab the hosted URL",
          "tags": [
            "landingPage"
          ]
        }
      },
      "/message": {
        "get": {
          "description": "This will fetch data from an existing Message.",
          "operationId": "getMessage",
          "parameters": [
            {
              "$ref": "#/parameters/idParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "404": {
              "description": "Message not found"
            }
          },
          "summary": "This will get an existing Message",
          "tags": [
            "messages"
          ]
        },
        "post": {
          "description": "",
          "operationId": "saveMessage",
          "parameters": [
            {
              "description": "Object Type ID.",
              "enum": [
                7
              ],
              "format": "int32",
              "in": "formData",
              "name": "objectID",
              "type": "integer"
            },
            {
              "description": "Message alias.",
              "in": "formData",
              "name": "alias",
              "type": "string"
            },
            {
              "description": "Name of your Message.",
              "in": "formData",
              "name": "name",
              "type": "string"
            },
            {
              "description": "Subject to be sent with the Message.",
              "in": "formData",
              "name": "subject",
              "type": "string"
            },
            {
              "description": "Message type: use <b>template</b> for ONTRAmail, <b>e-mail</b> for Legacy Email, <b>sms</b> for SMS Messages, <b>task</b> for Task Messages.",
              "enum": [
                "template",
                "e-mail",
                "sms",
                "task"
              ],
              "in": "formData",
              "name": "type",
              "type": "string"
            },
            {
              "description": "Object type to associate with this Message. This will be zero (0) for Contacts. You should only change this if you are using Custom Objects.",
              "format": "int32",
              "in": "formData",
              "name": "object_type_id",
              "type": "integer"
            },
            {
              "description": "Who will this Message come from? If not <b>owner</b> or <b>custom</b>, this field can contain the Staff user ID to send the Message from.",
              "enum": [
                "owner",
                "custom",
                "<staff user ID>"
              ],
              "in": "formData",
              "name": "from",
              "type": "string"
            },
            {
              "default": "owner",
              "description": "Name to be used in the 'Message From' field when the <b>from</b> field is set to <b>custom</b>.",
              "in": "formData",
              "name": "send_out_name",
              "type": "string"
            },
            {
              "default": "Contact owner email",
              "description": "The email address to use as the reply-to in the Message.",
              "in": "formData",
              "name": "reply_to_email",
              "type": "string"
            },
            {
              "description": "The plain text version of your Message (for Email messages). For SMS Messages, this is the content that will be sent.",
              "in": "formData",
              "name": "plaintext",
              "type": "string"
            },
            {
              "description": "Custom Send-from email address. Leave this empty to use your default email address. Otherwise, this must be a validated send-from email address.",
              "in": "formData",
              "name": "send_from",
              "type": "string"
            },
            {
              "default": "email",
              "description": "Only used with SMS Messages or Custom Objects. Select the field to use when there may be a parent or child relationship to the Object type given in <b>object_type_id</b>. The default for SMS Message is <b>sms_number.</b>",
              "in": "formData",
              "name": "send_to",
              "type": "string"
            },
            {
              "description": "Use this for Legacy Email Messages only. This is the HTML content of the Message.",
              "in": "formData",
              "name": "message_body",
              "type": "string"
            },
            {
              "description": "For ONTRAmail Messages only; this is the content of the message. Note that this can be extremely complex, so you should start by inspecting the resource that is sent when saving a Message from inside the App. For SMS Messages, use the plaintext field for content.",
              "in": "formData",
              "name": "resource",
              "type": "string"
            },
            {
              "description": "Short title that will appear as the first line in email clients.",
              "in": "formData",
              "name": "email_title",
              "type": "string"
            },
            {
              "description": "Use this only for Task Messages. This is the content of the Message.",
              "in": "formData",
              "name": "task_data",
              "type": "string"
            },
            {
              "description": "Use this only for Task Messages. This is the number of days after assignment this Task is due.",
              "format": "int32",
              "in": "formData",
              "name": "due_date",
              "type": "integer"
            },
            {
              "description": "Use this only for Task Messages. This is the Staff user ID of the Task owner.",
              "format": "int32",
              "in": "formData",
              "name": "task_owner",
              "type": "integer"
            },
            {
              "description": "Use this only for Task Messages. This is the optional Form ID to be filled when the Task is completed. This form must already exist.",
              "format": "int32",
              "in": "formData",
              "name": "task_form",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Message successfully created",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "This will create a new Message",
          "tags": [
            "messages"
          ]
        },
        "put": {
          "description": "",
          "operationId": "updateMessage",
          "parameters": [
            {
              "description": "ID of the Message to be updated.",
              "format": "int32",
              "in": "formData",
              "name": "id",
              "required": true,
              "type": "integer"
            },
            {
              "description": "Object Type ID.",
              "enum": [
                7
              ],
              "format": "int32",
              "in": "formData",
              "name": "objectID",
              "type": "integer"
            },
            {
              "description": "Message alias.",
              "in": "formData",
              "name": "alias",
              "type": "string"
            },
            {
              "description": "Name of your Message.",
              "in": "formData",
              "name": "name",
              "type": "string"
            },
            {
              "description": "Subject to be sent with the Message.",
              "in": "formData",
              "name": "subject",
              "type": "string"
            },
            {
              "description": "Who will this Message come from? If not <b>owner</b> or <b>custom</b>, this field can contain the Staff user ID to send the Message from.",
              "enum": [
                "owner",
                "custom",
                "<staff user ID>"
              ],
              "in": "formData",
              "name": "from",
              "type": "string"
            },
            {
              "default": "owner",
              "description": "Name to be used in the 'Message From' field when the <b>from</b> field is set to <b>custom</b>.",
              "in": "formData",
              "name": "send_out_name",
              "type": "string"
            },
            {
              "default": "Contact owner email",
              "description": "The email address to use as the reply-to in the Message.",
              "in": "formData",
              "name": "reply_to_email",
              "type": "string"
            },
            {
              "description": "The plain text version of your Message (for Email messages). For SMS Messages, this is the content that will be sent.",
              "in": "formData",
              "name": "plaintext",
              "type": "string"
            },
            {
              "description": "Custom Send-from email address. Leave this empty to use your default email address. Otherwise, this must be a validated send-from email address.",
              "in": "formData",
              "name": "send_from",
              "type": "string"
            },
            {
              "default": "email",
              "description": "Only used with SMS Messages or Custom Objects. Select the field to use when there may be a parent or child relationship to the Object type given in <b>object_type_id</b>. The default for SMS Message is <b>sms_number.</b>",
              "in": "formData",
              "name": "send_to",
              "type": "string"
            },
            {
              "description": "Use this for Legacy Email Messages only. This is the HTML content of the Message.",
              "in": "formData",
              "name": "message_body",
              "type": "string"
            },
            {
              "description": "For ONTRAmail Messages only; this is the content of the message. Note that this can be extremely complex, so you should start by inspecting the resource that is sent when saving a Message from inside the App. For SMS Messages, use the plaintext field for content.",
              "in": "formData",
              "name": "resource",
              "type": "string"
            },
            {
              "description": "Short title that will appear as the first line in email clients.",
              "in": "formData",
              "name": "email_title",
              "type": "string"
            },
            {
              "description": "Use this only for Task Messages. This is the content of the Message.",
              "in": "formData",
              "name": "task_data",
              "type": "string"
            },
            {
              "description": "Use this only for Task Messages. This is the number of days after assignment this Task is due.",
              "format": "int32",
              "in": "formData",
              "name": "due_date",
              "type": "integer"
            },
            {
              "description": "Use this only for Task Messages. This is the Staff user ID of the Task owner.",
              "format": "int32",
              "in": "formData",
              "name": "task_owner",
              "type": "integer"
            },
            {
              "description": "Use this only for Task Messages. This is the optional Form ID to be filled when the Task is completed. This form must already exist.",
              "format": "int32",
              "in": "formData",
              "name": "task_form",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Message successfully updated",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "This will update an existing Message",
          "tags": [
            "messages"
          ]
        }
      },
      "/object": {
        "delete": {
          "description": "This will delete an Object with the given Object type and ID.",
          "operationId": "deleteObject",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParam"
            },
            {
              "$ref": "#/parameters/idParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Invalid objectID"
            },
            "404": {
              "description": "Object not found"
            }
          },
          "summary": "This will delete an Object",
          "tags": [
            "objects"
          ]
        },
        "get": {
          "description": "This will fetch data for a given Object type and ID.",
          "operationId": "getObject",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParam"
            },
            {
              "$ref": "#/parameters/idParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Invalid objectID"
            },
            "404": {
              "description": "Object not found"
            }
          },
          "summary": "This will get an Object's data",
          "tags": [
            "objects"
          ]
        }
      },
      "/objects": {
        "delete": {
          "description": "",
          "operationId": "deleteObjects",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParam"
            },
            {
              "$ref": "#/parameters/idsParam"
            },
            {
              "$ref": "#/parameters/startParam"
            },
            {
              "$ref": "#/parameters/rangeParam"
            },
            {
              "$ref": "#/parameters/sortParam"
            },
            {
              "$ref": "#/parameters/sortDirParam"
            },
            {
              "$ref": "#/parameters/conditionParam"
            },
            {
              "$ref": "#/parameters/searchParam"
            },
            {
              "$ref": "#/parameters/searchNotesParam"
            },
            {
              "$ref": "#/parameters/date_rangeParam"
            },
            {
              "$ref": "#/parameters/group_idsParam"
            },
            {
              "$ref": "#/parameters/externsParam"
            },
            {
              "$ref": "#/parameters/listFieldsParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Invalid objectID"
            }
          },
          "summary": "This will delete a list of Objects",
          "tags": [
            "objects"
          ]
        },
        "get": {
          "description": "",
          "operationId": "getObjects",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParam"
            },
            {
              "$ref": "#/parameters/idsParam"
            },
            {
              "$ref": "#/parameters/startParam"
            },
            {
              "$ref": "#/parameters/rangeParam"
            },
            {
              "$ref": "#/parameters/sortParam"
            },
            {
              "$ref": "#/parameters/sortDirParam"
            },
            {
              "$ref": "#/parameters/conditionParam"
            },
            {
              "$ref": "#/parameters/searchParam"
            },
            {
              "$ref": "#/parameters/searchNotesParam"
            },
            {
              "$ref": "#/parameters/date_rangeParam"
            },
            {
              "$ref": "#/parameters/group_idsParam"
            },
            {
              "$ref": "#/parameters/externsParam"
            },
            {
              "$ref": "#/parameters/listFieldsParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Invalid objectID"
            }
          },
          "summary": "This will get a list of Objects",
          "tags": [
            "objects"
          ]
        },
        "post": {
          "description": "This will create an Object with the given data. Object type is a required parameters, but other parameters are optional and dependent upon the object type. We have provided optional parameters as examples for updating a Contact. When using this in your application, all invalid parameters will be ignored.",
          "operationId": "createObject",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParamFormData"
            },
            {
              "description": "New first name for the Object.",
              "in": "formData",
              "name": "firstname",
              "type": "string"
            },
            {
              "description": "New last name for the Object.",
              "in": "formData",
              "name": "lastname",
              "type": "string"
            },
            {
              "description": "New email address for the Object.",
              "in": "formData",
              "name": "email",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Invalid objectID"
            }
          },
          "summary": "This will create an Object",
          "tags": [
            "objects"
          ]
        },
        "put": {
          "description": "This will update an Object's data. The Object type and ID and required parameters, but other parameters are dependent upon the object type. We have provided optional parameters as examples for updating a Contact. When using this in your application, all invalid parameters will be ignored.",
          "operationId": "updateObjects",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParamFormData"
            },
            {
              "$ref": "#/parameters/idParamFormData"
            },
            {
              "description": "New first name for the Object.",
              "in": "formData",
              "name": "firstname",
              "type": "string"
            },
            {
              "description": "New last name for the Object.",
              "in": "formData",
              "name": "lastname",
              "type": "string"
            },
            {
              "description": "New email address for the Object.",
              "in": "formData",
              "name": "email",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated object",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "404": {
              "description": "Object not found"
            }
          },
          "summary": "This will update an Object's data",
          "tags": [
            "objects"
          ]
        }
      },
      "/objects/getInfo": {
        "get": {
          "description": "Get information about an Objects Collection, such as the number of Objects that match the given criteria.",
          "operationId": "getObjectsInfo",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParam"
            },
            {
              "$ref": "#/parameters/conditionParam"
            },
            {
              "$ref": "#/parameters/searchParam"
            },
            {
              "$ref": "#/parameters/searchNotesParam"
            },
            {
              "$ref": "#/parameters/date_rangeParam"
            },
            {
              "$ref": "#/parameters/group_idsParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Invalid objectID"
            }
          },
          "summary": "Get information about an Objects Collection",
          "tags": [
            "objects"
          ]
        }
      },
      "/objects/meta": {
        "get": {
          "description": "This will get a list of existing Object types and their corresponding field names. Use the <b>objectID</b> parameter to This will get a single Object type.",
          "operationId": "getMeta",
          "parameters": [
            {
              "default": "byId",
              "description": "Choose to get the list indexed by Object class name or integer ID.",
              "enum": [
                "byId",
                "byName"
              ],
              "in": "query",
              "name": "format",
              "type": "string"
            },
            {
              "default": 0,
              "description": "Object Type ID.",
              "format": "int32",
              "in": "query",
              "name": "objectID",
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "This will get a list of existing Object types",
          "tags": [
            "objects"
          ]
        }
      },
      "/objects/pause": {
        "post": {
          "description": "This will pause a Sequence. Either <b>ids</b> or <b>group_ids</b> must be given.",
          "operationId": "pause",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParamFormData"
            },
            {
              "$ref": "#/parameters/idsParamFormData"
            },
            {
              "$ref": "#/parameters/startParamFormData"
            },
            {
              "$ref": "#/parameters/rangeParamFormData"
            },
            {
              "$ref": "#/parameters/sortParamFormData"
            },
            {
              "$ref": "#/parameters/sortDirParamFormData"
            },
            {
              "$ref": "#/parameters/conditionParamFormData"
            },
            {
              "$ref": "#/parameters/searchParamFormData"
            },
            {
              "$ref": "#/parameters/date_rangeParamFormData"
            },
            {
              "$ref": "#/parameters/group_idsParamFormData"
            },
            {
              "$ref": "#/parameters/externsParamFormData"
            },
            {
              "$ref": "#/parameters/listFieldsParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully pause Sequence(s)",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "This will pause a Sequence",
          "tags": [
            "objects"
          ]
        }
      },
      "/objects/saveorupdate": {
        "post": {
          "description": "This will create an Object with the given data or will merge with an Object in the database if the unique field matches another Object’s. Object type is a required parameter, but other parameters are optional and depend on the Object type. We have provided optional parameters as examples for updating a Contact. When using this in your application, all invalid parameters will be ignored.",
          "operationId": "saveorupdateObject",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParamFormData"
            },
            {
              "description": "First name for the Object.",
              "in": "formData",
              "name": "firstname",
              "type": "string"
            },
            {
              "description": "Last name for the Object.",
              "in": "formData",
              "name": "lastname",
              "type": "string"
            },
            {
              "description": "Email address for the Object.",
              "in": "formData",
              "name": "email",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful object query",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Invalid objectID"
            }
          },
          "summary": "Create or Merge an Object",
          "tags": [
            "objects"
          ]
        }
      },
      "/objects/tag": {
        "delete": {
          "description": "This will remove a Tag from an Object using a Tag ID. When adding or removing Tags, either <b>ids</b> or <b>group_ids</b> must be given.",
          "operationId": "removeTag",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParamFormData"
            },
            {
              "$ref": "#/parameters/removeListParamFormData"
            },
            {
              "$ref": "#/parameters/idsParamFormData"
            },
            {
              "$ref": "#/parameters/startParamFormData"
            },
            {
              "$ref": "#/parameters/rangeParamFormData"
            },
            {
              "$ref": "#/parameters/sortParamFormData"
            },
            {
              "$ref": "#/parameters/sortDirParamFormData"
            },
            {
              "$ref": "#/parameters/conditionParamFormData"
            },
            {
              "$ref": "#/parameters/searchParamFormData"
            },
            {
              "$ref": "#/parameters/searchNotesParamFormData"
            },
            {
              "$ref": "#/parameters/date_rangeParamFormData"
            },
            {
              "$ref": "#/parameters/group_idsParamFormData"
            },
            {
              "$ref": "#/parameters/externsParamFormData"
            },
            {
              "$ref": "#/parameters/listFieldsParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully removed Tag(s)",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "This will remove an Object Tag",
          "tags": [
            "objects"
          ]
        },
        "put": {
          "description": "This will add a Tag to an Object. when adding or removing Tags, either <b>ids</b> or <b>group_ids</b> must be given.",
          "operationId": "addTag",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParamFormData"
            },
            {
              "$ref": "#/parameters/addListParamFormData"
            },
            {
              "$ref": "#/parameters/idsParamFormData"
            },
            {
              "$ref": "#/parameters/startParamFormData"
            },
            {
              "$ref": "#/parameters/rangeParamFormData"
            },
            {
              "$ref": "#/parameters/sortParamFormData"
            },
            {
              "$ref": "#/parameters/sortDirParamFormData"
            },
            {
              "$ref": "#/parameters/conditionParamFormData"
            },
            {
              "$ref": "#/parameters/searchParamFormData"
            },
            {
              "$ref": "#/parameters/searchNotesParamFormData"
            },
            {
              "$ref": "#/parameters/date_rangeParamFormData"
            },
            {
              "$ref": "#/parameters/group_idsParamFormData"
            },
            {
              "$ref": "#/parameters/externsParamFormData"
            },
            {
              "$ref": "#/parameters/listFieldsParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully added Tag(s)",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "This will add an Object Tag",
          "tags": [
            "objects"
          ]
        }
      },
      "/objects/unpause": {
        "post": {
          "description": "This will upause a Sequence. Either <b>ids</b> or <b>group_ids</b> must be given.",
          "operationId": "unpause",
          "parameters": [
            {
              "$ref": "#/parameters/objectIdParamFormData"
            },
            {
              "$ref": "#/parameters/idsParamFormData"
            },
            {
              "$ref": "#/parameters/startParamFormData"
            },
            {
              "$ref": "#/parameters/rangeParamFormData"
            },
            {
              "$ref": "#/parameters/sortParamFormData"
            },
            {
              "$ref": "#/parameters/sortDirParamFormData"
            },
            {
              "$ref": "#/parameters/conditionParamFormData"
            },
            {
              "$ref": "#/parameters/searchParamFormData"
            },
            {
              "$ref": "#/parameters/date_rangeParamFormData"
            },
            {
              "$ref": "#/parameters/group_idsParamFormData"
            },
            {
              "$ref": "#/parameters/externsParamFormData"
            },
            {
              "$ref": "#/parameters/listFieldsParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully unpaused Sequence(s)",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "This will unpause a Sequence",
          "tags": [
            "objects"
          ]
        }
      },
      "/task/cancel": {
        "post": {
          "description": "To affect a single Task or list of specific Tasks, use the <strong>ids</strong> array in the <strong>criteria</strong> parameter. Otherwise, you should use <strong>performAll</strong> and other criteria to select a Group of Tasks to cancel.",
          "operationId": "taskCancel",
          "parameters": [
            {
              "description": "Criteria of the Tasks to cancel.",
              "in": "body",
              "name": "criteria",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Criteria"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully canceled tasks",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "Cancel a set of Tasks",
          "tags": [
            "tasks"
          ]
        }
      },
      "/task/complete": {
        "post": {
          "description": "This will mark one or many Tasks as complete. As an option, you can assign a new Task for further follow-up. To affect a single Task or list of specific Tasks, use the <strong>ids</strong> array in the <strong>criteria</strong> parameter. Otherwise, you should use <strong>performAll</strong> and other criteria to select a Group of Tasks to complete.",
          "operationId": "taskComplete",
          "parameters": [
            {
              "description": "Criteria and data of the Tasks to complete.",
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/TaskCompleteParams"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully canceled tasks",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            }
          },
          "summary": "Complete a set of Tasks",
          "tags": [
            "tasks"
          ]
        }
      },
      "/transaction/convertToCollections": {
        "put": {
          "description": "",
          "operationId": "convertToCollections",
          "parameters": [
            {
              "$ref": "#/parameters/idParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully converted transaction",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error converting transaction"
            },
            "404": {
              "description": "Object not found"
            }
          },
          "summary": "Convert the status of one or more Transactions to Collections",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/convertToDecline": {
        "put": {
          "description": "",
          "operationId": "convertToDecline",
          "parameters": [
            {
              "$ref": "#/parameters/idParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully converted transaction",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error converting transaction"
            },
            "404": {
              "description": "Object not found"
            }
          },
          "summary": "Convert the status of one or more Transactions to Declined",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/markPaid": {
        "put": {
          "description": "",
          "operationId": "markPaid",
          "parameters": [
            {
              "$ref": "#/parameters/idParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully marked as paid",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error marking Transaction as paid"
            },
            "404": {
              "description": "Object not found"
            }
          },
          "summary": "Mark a Transaction as Paid",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/order": {
        "get": {
          "description": "",
          "operationId": "getOrder",
          "parameters": [
            {
              "description": "Order ID.",
              "in": "query",
              "name": "id",
              "required": true,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Success fetching Order",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error fetching Order"
            }
          },
          "summary": "Get full information about an order",
          "tags": [
            "transactions"
          ]
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "description": "Update information about an Order. Please note that if offer data is omitted, this Order will be deleted.",
          "operationId": "setOrder",
          "parameters": [
            {
              "description": "Order Object.",
              "in": "body",
              "name": "order",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully updated Order information",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error updating Order information"
            }
          },
          "summary": "Update information about an Order",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/processManual": {
        "post": {
          "description": "This will create a Transaction for a Contact. Please note that this request requires valid parameters for all associated members of the Transaction or the request will fail. If you have doubled-checked all parameters and the request is still failing, check that the payload JSON format is correct by using <a href=\"http://jsonlint.com/\">JSONLint</a>. If credit card and billing information already exist for this contact, you may omit <b>billing_address</b> and <b>payer</b> from the request. Note that <b>trans_date</b> is given in milliseconds elapsed since midnight on 1/1/1970.",
          "operationId": "processManual",
          "parameters": [
            {
              "description": "Definition of the Transaction.",
              "in": "body",
              "name": "transaction",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Transaction"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully created transaction",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error processing transaction"
            }
          },
          "summary": "This will create a new Transaction",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/refund": {
        "put": {
          "description": "",
          "operationId": "refund",
          "parameters": [
            {
              "description": "Criteria of Transactions to refund.",
              "in": "body",
              "name": "criteria",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Criteria"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully refunded transaction",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error refunding transaction"
            }
          },
          "summary": "Refund one or more Transactions",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/rerun": {
        "post": {
          "description": "Re-run a single Transaction or a Group of Transactions that are currently in Collections.",
          "operationId": "rerun",
          "parameters": [
            {
              "description": "Criteria of Transactions to rerun.",
              "in": "body",
              "name": "criteria",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Criteria"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully reran transaction",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error rerunning transaction"
            }
          },
          "summary": "Re-run a Transaction",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/rerunCommission": {
        "put": {
          "description": "",
          "operationId": "rerunCommission",
          "parameters": [
            {
              "description": "Criteria of Transactions to rerun commissions.",
              "in": "body",
              "name": "criteria",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Criteria"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully reran commission",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error rerunning commission"
            }
          },
          "summary": "Re-run a Partner commission",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/resendInvoice": {
        "post": {
          "description": "",
          "operationId": "resendInvoice",
          "parameters": [
            {
              "description": "Criteria of Transactions to resend invoices.",
              "in": "body",
              "name": "criteria",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Criteria"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully created transaction",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error processing transaction"
            }
          },
          "summary": "Re-send a Transaction invoice",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/void": {
        "put": {
          "description": "",
          "operationId": "voidTransaction",
          "parameters": [
            {
              "description": "Criteria of Transactions to void.",
              "in": "body",
              "name": "criteria",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Criteria"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully voided transaction",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error voiding transaction"
            }
          },
          "summary": "Void a Transaction",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/voidPurchase": {
        "put": {
          "description": "",
          "operationId": "voidPurchase",
          "parameters": [
            {
              "$ref": "#/parameters/idParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully voided purchase",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error voiding purchase"
            },
            "404": {
              "description": "Object not found"
            }
          },
          "summary": "Void a purchase",
          "tags": [
            "transactions"
          ]
        }
      },
      "/transaction/writeOff": {
        "put": {
          "description": "",
          "operationId": "writeOff",
          "parameters": [
            {
              "$ref": "#/parameters/idParamFormData"
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully wrote off transaction",
              "schema": {
                "$ref": "#/definitions/Response",
                "type": "object"
              }
            },
            "400": {
              "description": "Error writing off transaction"
            },
            "404": {
              "description": "Object not found"
            }
          },
          "summary": "Write-off a Transaction",
          "tags": [
            "transactions"
          ]
        }
      }
    },
    "definitions": {
      "Address": {
        "properties": {
          "address": {
            "type": "string"
          },
          "address2": {
            "default": "",
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "city",
          "state",
          "zip",
          "country"
        ]
      },
      "Criteria": {
        "properties": {
          "condition": {
            "description": "Apply this condition to the collection query. This is essentially like a SQL WHERE clause, e.g. firstname='Ben'",
            "type": "string"
          },
          "date_range": {
            "description": "Start and End dates to search, in seconds since Jan 1, 1970, as a comma-separated list. Start (index 0 in the array) is inclusive, End (index 1) is exclusive. Either or both can be empty.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "externs": {
            "description": "External fields to include in results",
            "type": "string"
          },
          "group_ids": {
            "description": "Array of Group ID for Object type as comma-delimited list",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "ids": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "listFields": {
            "description": "Return only these fields in the response",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "objectID": {
            "description": "",
            "format": "int32",
            "type": "integer"
          },
          "range": {
            "description": "Number of results to return (maximum=50)",
            "format": "int32",
            "maximum": 50,
            "type": "integer"
          },
          "search": {
            "description": "Search Objects for this string",
            "type": "string"
          },
          "searchNotes": {
            "description": "Boolean flag to additionally search Object Notes for the Search term given in Search parameter",
            "type": "string"
          },
          "sort": {
            "description": "Field used to sort results",
            "type": "string"
          },
          "sortDir": {
            "description": "Sort direction, must be used in conjunction with <b>sort</b> parameter.",
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string"
          },
          "start": {
            "description": "Return results starting at this offset",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "objectID"
        ]
      },
      "Notification": {
        "properties": {
          "data": {
            "type": "string"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "notification_type": {
            "enum": [
              "notification"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "plaintext"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "notification_type",
          "data",
          "type"
        ],
        "type": "object"
      },
      "Offer": {
        "properties": {
          "ccExpirationDate": {
            "default": "",
            "description": "Credit card expiration date.",
            "type": "string"
          },
          "delay": {
            "description": "Days to delay start of offer.",
            "format": "int32",
            "type": "integer"
          },
          "grandTotal": {
            "description": "Total amount of sale.",
            "type": "number"
          },
          "hasShipping": {
            "default": false,
            "description": "Are there shipping charges?",
            "type": "boolean"
          },
          "hasTaxes": {
            "default": false,
            "description": "Are there applicable taxes?",
            "type": "boolean"
          },
          "offer_id": {
            "description": "This must be a valid Offer ID.",
            "format": "int32",
            "type": "integer"
          },
          "order_id": {
            "description": "This must be a valid Order ID.",
            "format": "int32",
            "type": "integer"
          },
          "products": {
            "items": {
              "$ref": "#/definitions/Product"
            },
            "type": "array"
          },
          "shipping": {
            "description": "Shipping amount.",
            "type": "number"
          },
          "shipping_charge_reoccurring_orders": {
            "default": false,
            "description": "Add shipping charge to reoccurring orders?",
            "type": "boolean"
          },
          "subTotal": {
            "description": "Subtotal.",
            "type": "number"
          },
          "taxes": {
            "items": {
              "$ref": "#/definitions/Tax"
            },
            "type": "array"
          }
        },
        "required": [
          "offer_id",
          "order_id",
          "products"
        ]
      },
      "Order": {
        "properties": {
          "affiliate_id": {
            "description": "Affiliate ID.",
            "format": "int32",
            "type": "integer"
          },
          "billing_address": {
            "$ref": "#/definitions/Address"
          },
          "chargeNow": {
            "enum": [
              "chargeNow"
            ],
            "type": "string"
          },
          "contact_id": {
            "format": "int32",
            "type": "integer"
          },
          "gateway_id": {
            "description": "Gateway ID.",
            "format": "int32",
            "type": "integer"
          },
          "invoice_template": {
            "description": "Invoice template ID.",
            "format": "int32",
            "type": "integer"
          },
          "objectID": {
            "format": "int32",
            "type": "integer"
          },
          "offer": {
            "$ref": "#/definitions/Offer"
          },
          "payer": {
            "$ref": "#/definitions/Payer"
          }
        },
        "required": [
          "objectID",
          "contact_id"
        ]
      },
      "Payer": {
        "properties": {
          "ccnumber": {
            "default": "",
            "type": "string"
          },
          "code": {
            "default": "",
            "description": "CVV code.",
            "type": "string"
          },
          "expire_month": {
            "description": "Expiration month (1-12).",
            "type": "integer"
          },
          "expire_year": {
            "description": "Expiration year (four-digit year, e.g. 2018).",
            "type": "integer"
          }
        },
        "required": [
          "ccnumber",
          "code"
        ]
      },
      "Price": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "payment_count": {
            "format": "int32",
            "type": "integer"
          },
          "price": {
            "type": "number"
          },
          "unit": {
            "enum": [
              "day",
              "week",
              "month",
              "quarter",
              "year"
            ],
            "type": "string"
          }
        },
        "required": [
          "price",
          "payment_count",
          "unit",
          "id"
        ]
      },
      "Product": {
        "properties": {
          "delay_start": {
            "description": "Days to delay start.",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "This must be an existing Product ID.",
            "format": "int32",
            "type": "integer"
          },
          "level1": {
            "description": "Partner Level 1 commission percentage.",
            "type": "number"
          },
          "level2": {
            "description": "Partner Level 2 commission percentage.",
            "type": "number"
          },
          "offer_to_affiliates": {
            "default": false,
            "description": "Is this offered to Partners (affiliates)?",
            "type": "boolean"
          },
          "owner": {
            "description": "Product owner (Staff ID).",
            "format": "int32",
            "type": "integer"
          },
          "price": {
            "items": {
              "$ref": "#/definitions/Price"
            },
            "type": "array"
          },
          "quantity": {
            "description": "How many of this product are being purchased?",
            "format": "int32",
            "type": "integer"
          },
          "setup_fee": {
            "description": "One-time setup fee.",
            "type": "number"
          },
          "setup_fee_date": {
            "description": "Date to charge setup fee (when setup_fee_when is \"on_date\").",
            "type": "string"
          },
          "setup_fee_when": {
            "description": "When should setup fee be applied?",
            "enum": [
              "immediately",
              "after_trial",
              "on_date"
            ],
            "type": "string"
          },
          "shipping": {
            "default": false,
            "description": "Does this product have an associated shipping cost?",
            "type": "boolean"
          },
          "subscription_count": {
            "format": "int32",
            "type": "integer"
          },
          "subscription_fee": {
            "type": "number"
          },
          "subscription_unit": {
            "enum": [
              "day",
              "week",
              "month",
              "quarter",
              "year"
            ],
            "type": "string"
          },
          "tax": {
            "default": false,
            "description": "Is this product taxable?",
            "type": "boolean"
          },
          "taxable": {
            "description": "Is this item taxable?",
            "type": "boolean"
          },
          "total": {
            "description": "What is the total amount of this sale?",
            "type": "number"
          },
          "trial_period_count": {
            "description": "Length of trial period (also set trial_period_units).",
            "format": "int32",
            "type": "integer"
          },
          "trial_period_unit": {
            "description": "Units describing length of trial period.",
            "enum": [
              "day",
              "week",
              "month",
              "quarter",
              "year"
            ],
            "type": "string"
          },
          "trial_price": {
            "description": "Price during trial period.",
            "type": "number"
          },
          "type": {
            "enum": [
              "single",
              "subscription",
              "one_time",
              "payment_plan"
            ],
            "type": "string"
          }
        },
        "required": [
          "quantity",
          "total",
          "price"
        ]
      },
      "Response": {
        "properties": {
          "account_id": {
            "format": "int32",
            "type": "integer"
          },
          "code": {
            "type": "integer"
          },
          "data": {
            "type": "object"
          },
          "notifications": {
            "$ref": "#/definitions/Notification",
            "type": "array"
          },
          "updates": {
            "$ref": "#/definitions/Update",
            "type": "array"
          }
        },
        "required": [
          "code",
          "data",
          "updates",
          "notifications",
          "account_id"
        ],
        "type": "object"
      },
      "Shipping": {
        "properties": {
          "id": {
            "description": "ID of the Shipping Method to apply. This must be an existing Shipping Method.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "TaskCompleteParams": {
        "properties": {
          "criteria": {
            "$ref": "#/definitions/Criteria"
          },
          "data": {
            "$ref": "#/definitions/TaskData"
          }
        },
        "required": [
          "criteria",
          "data"
        ]
      },
      "TaskData": {
        "properties": {
          "followup": {
            "$ref": "#/definitions/TaskFollowup"
          },
          "outcome": {
            "description": "Task outcome name. This must start with \":=\" For example, <strong>\":=signed\"</strong>.",
            "type": "string"
          },
          "task_form_data": {
            "description": "These fields can be used to update associated Object data when completing a task. For example, set <strong>task_form_title</strong> to \"New title\" to change the Contact's title.",
            "type": "string"
          }
        }
      },
      "TaskFollowup": {
        "properties": {
          "due_date": {
            "description": "Due date of new Task, given as number of days from current date.",
            "format": "int32",
            "type": "integer"
          },
          "message_id": {
            "description": "Message ID of new Task to be created for further followup. This Task must currently exist. New tasks can be created using the <a href=\"http://api.ontraport.com/doc/#!/objects/createObject\">Objects Create endpoint</a> with objectID=1.",
            "format": "int32",
            "type": "integer"
          },
          "task_owner": {
            "description": "New Task assignee.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "message_id",
          "due_date",
          "task_owner"
        ]
      },
      "Tax": {
        "properties": {
          "id": {
            "description": "ID of the Tax to apply. This must be an existing Tax type.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "Transaction": {
        "properties": {
          "billing_address": {
            "$ref": "#/definitions/Address"
          },
          "chargeNow": {
            "description": "Charge Transaction now or or just log a Transaction.",
            "enum": [
              "chargeNow",
              "chargeLog"
            ],
            "type": "string"
          },
          "contact_id": {
            "description": "Create new Transaction for this Object instance (Contact ID).",
            "type": "integer"
          },
          "gateway_id": {
            "description": "Gateway ID to use for this Transaction.",
            "type": "integer"
          },
          "invoice_template": {
            "description": "Invoice ID to use for this Transaction.",
            "example": 1,
            "type": "integer"
          },
          "offer": {
            "$ref": "#/definitions/Offer"
          },
          "payer": {
            "$ref": "#/definitions/Payer"
          },
          "trans_date": {
            "description": "Timestamp (in milliseconds since midnight 1/1/1970) of the Transaction.",
            "type": "integer"
          }
        },
        "required": [
          "contact_id",
          "chargeNow",
          "invoice_template",
          "gateway_id",
          "offer"
        ]
      },
      "Update": {
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  }
}