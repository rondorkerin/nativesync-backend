{
  "type": "api",
  "key": "guru:geneea.com",
  "info": {
    "description": "<div class=\"api-description\">\n\n\n\n    <h2>Authentication</h2>\n\n\n\n    <p>For all calls, supply your API key. <a\n\nhref=\"https://geneea.3scale.net/\">Sign up to <em>obtain the key</em></a>.</p>\n\n\n\n    <p>\n\n\n\n        Our API supports both <em>unencrypted (HTTP)</em> and <em>encrypted\n\n(HTTPS)</em> protocols.\n\n\n\n        However, for security reasons, we strongly encourage using only the\n\nencrypted version.\n\n\n\n    </p>\n\n\n\n    <p>The API key should be supplied as either a request parameter\n\n<code>user_key</code> or in <code>Authorization</code> header.</p>\n\n\n\n    <pre><code>Authorization: user_key &lt;YOUR_API_KEY&gt;</code></pre>\n\n\n\n\n\n\n\n    <h2>API operations</h2>\n\n\n\n    <p>\n\n\n\n        All API operations can perform analysis on supplied raw text or on\n\ntext extracted from a given URL.\n\n\n\n        Optionally, one can supply additional information which can make the\n\nresult more precise. An example\n\n\n\n        of such information would be the language of text or a particular\n\ntext extractor for URL resources.\n\n\n\n    </p>\n\n\n\n    <p>The supported types of analyses are:</p>\n\n\n\n    <ul>\n\n\n\n        <li><strong>lemmatization</strong> &longrightarrow;\n\n\n\n            Finds out lemmata (basic forms) of all the words in the\n\ndocument.\n\n\n\n        </li>\n\n\n\n        <li><strong>correction</strong> &longrightarrow;\n\n\n\n            Performs correction (diacritization) on all the words in the\n\ndocument.\n\n\n\n        </li>\n\n\n\n        <li><strong>topic detection</strong> &longrightarrow;\n\n\n\n            Determines a topic of the document, e.g. finance or sports.\n\n\n\n        </li>\n\n\n\n        <li><strong>sentiment analysis</strong> &longrightarrow;\n\n\n\n            Determines a sentiment of the document, i.e. how positive or\n\nnegative the document is.\n\n\n\n        </li>\n\n\n\n        <li><strong>named entity recognition</strong> &longrightarrow;\n\n\n\n            Finds named entities (like person, location, date etc.)\nmentioned\nthe the document.\n\n\n\n        </li>\n\n\n\n    </ul>\n\n\n\n\n\n\n\n    <h2>Encoding</h2>\n\n\n\n    <p>The supplied text is expected to be in UTF-8 encoding, this is\n\nespecially important for non-english texts.</p>\n\n\n\n\n\n\n\n    <h2>Returned values</h2>\n\n\n\n    <p>The API calls always return objects in serialized JSON format in\nUTF-8\nencoding.</p>\n\n\n\n    <p>\n\n\n\n        If any error occurs, the HTTP response code will be in the range\n\n<code>4xx</code> (client-side error) or\n\n\n\n        <code>5xx</code> (server-side error). In this situation, the body of\n\nthe response will contain information\n\n\n\n        about the error in JSON format, with <code>exception</code> and\n\n<code>message</code> values.\n\n\n\n    </p>\n\n\n\n\n\n\n\n    <h2>URL limitations</h2>\n\n\n\n    <p>\n\n\n\n        All the requests are semantically <code>GET</code>. However, for\n\nlonger texts, you may run into issues\n\n\n\n        with URL length limit. Therefore, it's possible to always issue\n\na <code>POST</code> request with all\n\n\n\n        the parameters encoded as a JSON in the request body.\n\n\n\n    </p>\n\n\n\n    <p>Example:</p>\n\n\n\n    <pre><code>\n\n\n\n        POST /s1/sentiment\n\n\n\n        Content-Type: application/json\n\n\n\n\n\n\n\n        {\"text\":\"There is no harm in being sometimes wrong - especially if\n\none is promptly found out.\"}\n\n\n\n    </code></pre>\n\n\n\n    <p>This is equivalent to <code>GET\n\n/s1/sentiment?text=There%20is%20no%20harm...</code></p>\n\n\n\n\n\n\n\n    <h2>Request limitations</h2>\n\n\n\n    <p>\n\n\n\n        The API has other limitations concerning the size of the HTTP\n\nrequests. The maximal allowed size of any\n\n\n\n        POST request body is <em>512 KiB</em>. For request with a URL\n\nresource, the maximal allowed number of\n\n\n\n        extracted characters from each such resource is <em>100,000</em>.\n\n\n\n    </p>\n\n\n\n\n\n\n\n    <h2>More information</h2>\n\n\n\n    <p>\n\n\n\n        <a\n\nhref=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation\n target=\"_blank\">\n\n\n\n        The Interpretor Public Documentation\n\n\n\n        </a>\n\n\n\n    </p>\n\n\n\n</div>\n",
    "title": "Geneea Natural Language Processing",
    "version": "1.0",
    "x-logo": {
      "url": "https://apis-guru.github.io/api-models/cache/geneea.com/1.0/logo.png"
    },
    "x-origin": {
      "format": "swagger",
      "url": "https://api.geneea.com/api-docs?group=s1",
      "version": "1.2"
    },
    "x-providerName": "geneea.com"
  },
  "public": true,
  "swagger": {
    "basePath": "/",
    "definitions": {
      "AccountInfo": {
        "description": "Information about a user account",
        "properties": {
          "remainingQuotas": {
            "description": "Remaining quotas for the user account",
            "items": {
              "$ref": "#/definitions/Entry«string,long»"
            },
            "type": "array"
          },
          "type": {
            "description": "Type (plan) of the user account",
            "enum": [
              "BASIC",
              "PREMIUM",
              "FREE",
              "SILVER",
              "GOLD",
              "PLATINUM",
              "ANONYMOUS"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "remainingQuotas"
        ]
      },
      "EntitiesResponse": {
        "description": "Response for the named-entity recognition",
        "properties": {
          "entities": {
            "description": "Found named entities in the document",
            "items": {
              "$ref": "#/definitions/Entity"
            },
            "type": "array"
          },
          "language": {
            "description": "The used language of the document",
            "type": "string"
          },
          "text": {
            "description": "The raw text of the document which has been analysed",
            "type": "string"
          }
        },
        "required": [
          "language",
          "entities"
        ]
      },
      "Entity": {
        "description": "The named entity",
        "properties": {
          "entity": {
            "description": "Disambiguated and standardized form of the entity",
            "type": "string"
          },
          "links": {
            "description": "Disambiguation links for the entity, e.g. its DBpedia page",
            "type": "object"
          },
          "sentiment": {
            "description": "Detected sentiment of the entity (value from -1.0 to 1.0)",
            "format": "double",
            "type": "number"
          },
          "textOffset": {
            "description": "Character offset in the text (starting from 0)",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "Detected type of the entity",
            "type": "string"
          }
        },
        "required": [
          "entity",
          "type",
          "textOffset",
          "links"
        ]
      },
      "Entry«string,long»": {
        "properties": {
          "key": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Label": {
        "description": "The topic label",
        "properties": {
          "confidence": {
            "description": "Confidence (probability) of this label",
            "format": "double",
            "type": "number"
          },
          "label": {
            "description": "The value of this label",
            "type": "string"
          }
        },
        "required": [
          "label",
          "confidence"
        ]
      },
      "LemmatizeResponse": {
        "description": "Response for the lemmatization",
        "properties": {
          "language": {
            "description": "The used language of the document",
            "type": "string"
          },
          "lemmatizedText": {
            "description": "Lemmatized text of the document, individual tokens are separated by a space and sentences are separated by a new-line character",
            "type": "string"
          },
          "text": {
            "description": "The raw text of the document which has been analysed",
            "type": "string"
          }
        },
        "required": [
          "language",
          "lemmatizedText"
        ]
      },
      "Request": {
        "description": "Request encapsulation for simple API version 1",
        "properties": {
          "extractor": {
            "description": "[optional] Text extractor to be used when analyzing HTML document",
            "enum": [
              "default",
              "article",
              "keep-everything"
            ],
            "type": "string"
          },
          "language": {
            "description": "[optional] The language of the document, auto-detection will be used if omitted",
            "type": "string"
          },
          "options": {
            "description": "[optional] Additional options for the internal modules (key-value pairs)",
            "type": "object"
          },
          "returnTextInfo": {
            "description": "[optional] Indicates whether to return the source text within the response object",
            "type": "boolean"
          },
          "text": {
            "description": "The raw text to be analyzed, mutually exclusive with the 'url' parameter",
            "type": "string"
          },
          "url": {
            "description": "URL of a document to be analysed, mutually exclusive with the 'text' parameter",
            "type": "string"
          }
        }
      },
      "Response for the text correction": {
        "properties": {
          "corrected": {
            "type": "boolean"
          },
          "correctedText": {
            "description": "Corrected text of the document",
            "type": "string"
          },
          "diacritized": {
            "type": "boolean"
          },
          "language": {
            "description": "The used language of the document",
            "type": "string"
          },
          "text": {
            "description": "The raw text of the document which has been analysed",
            "type": "string"
          }
        },
        "required": [
          "language",
          "correctedText"
        ]
      },
      "SentimentResponse": {
        "description": "Response for the sentiment analysis",
        "properties": {
          "language": {
            "description": "The used language of the document",
            "type": "string"
          },
          "sentiment": {
            "description": "Detected sentiment of the document (value from -1.0 to 1.0)",
            "format": "double",
            "type": "number"
          },
          "text": {
            "description": "The raw text of the document which has been analysed",
            "type": "string"
          }
        },
        "required": [
          "language",
          "sentiment"
        ]
      },
      "TopicResponse": {
        "description": "Response for the topic detection",
        "properties": {
          "confidence": {
            "description": "Confidence for the detected topic",
            "format": "double",
            "type": "number"
          },
          "labels": {
            "description": "Probabilistic distribution over possible topic labels",
            "items": {
              "$ref": "#/definitions/Label"
            },
            "type": "array"
          },
          "language": {
            "description": "The used language of the document",
            "type": "string"
          },
          "text": {
            "description": "The raw text of the document which has been analysed",
            "type": "string"
          },
          "topic": {
            "description": "Detected topic of the document",
            "type": "string"
          }
        },
        "required": [
          "language",
          "topic",
          "confidence",
          "labels"
        ]
      }
    },
    "host": "api.geneea.com",
    "info": {
      "description": "<div class=\"api-description\">\n\n\n\n    <h2>Authentication</h2>\n\n\n\n    <p>For all calls, supply your API key. <a\n\nhref=\"https://geneea.3scale.net/\">Sign up to <em>obtain the key</em></a>.</p>\n\n\n\n    <p>\n\n\n\n        Our API supports both <em>unencrypted (HTTP)</em> and <em>encrypted\n\n(HTTPS)</em> protocols.\n\n\n\n        However, for security reasons, we strongly encourage using only the\n\nencrypted version.\n\n\n\n    </p>\n\n\n\n    <p>The API key should be supplied as either a request parameter\n\n<code>user_key</code> or in <code>Authorization</code> header.</p>\n\n\n\n    <pre><code>Authorization: user_key &lt;YOUR_API_KEY&gt;</code></pre>\n\n\n\n\n\n\n\n    <h2>API operations</h2>\n\n\n\n    <p>\n\n\n\n        All API operations can perform analysis on supplied raw text or on\n\ntext extracted from a given URL.\n\n\n\n        Optionally, one can supply additional information which can make the\n\nresult more precise. An example\n\n\n\n        of such information would be the language of text or a particular\n\ntext extractor for URL resources.\n\n\n\n    </p>\n\n\n\n    <p>The supported types of analyses are:</p>\n\n\n\n    <ul>\n\n\n\n        <li><strong>lemmatization</strong> &longrightarrow;\n\n\n\n            Finds out lemmata (basic forms) of all the words in the\n\ndocument.\n\n\n\n        </li>\n\n\n\n        <li><strong>correction</strong> &longrightarrow;\n\n\n\n            Performs correction (diacritization) on all the words in the\n\ndocument.\n\n\n\n        </li>\n\n\n\n        <li><strong>topic detection</strong> &longrightarrow;\n\n\n\n            Determines a topic of the document, e.g. finance or sports.\n\n\n\n        </li>\n\n\n\n        <li><strong>sentiment analysis</strong> &longrightarrow;\n\n\n\n            Determines a sentiment of the document, i.e. how positive or\n\nnegative the document is.\n\n\n\n        </li>\n\n\n\n        <li><strong>named entity recognition</strong> &longrightarrow;\n\n\n\n            Finds named entities (like person, location, date etc.)\nmentioned\nthe the document.\n\n\n\n        </li>\n\n\n\n    </ul>\n\n\n\n\n\n\n\n    <h2>Encoding</h2>\n\n\n\n    <p>The supplied text is expected to be in UTF-8 encoding, this is\n\nespecially important for non-english texts.</p>\n\n\n\n\n\n\n\n    <h2>Returned values</h2>\n\n\n\n    <p>The API calls always return objects in serialized JSON format in\nUTF-8\nencoding.</p>\n\n\n\n    <p>\n\n\n\n        If any error occurs, the HTTP response code will be in the range\n\n<code>4xx</code> (client-side error) or\n\n\n\n        <code>5xx</code> (server-side error). In this situation, the body of\n\nthe response will contain information\n\n\n\n        about the error in JSON format, with <code>exception</code> and\n\n<code>message</code> values.\n\n\n\n    </p>\n\n\n\n\n\n\n\n    <h2>URL limitations</h2>\n\n\n\n    <p>\n\n\n\n        All the requests are semantically <code>GET</code>. However, for\n\nlonger texts, you may run into issues\n\n\n\n        with URL length limit. Therefore, it's possible to always issue\n\na <code>POST</code> request with all\n\n\n\n        the parameters encoded as a JSON in the request body.\n\n\n\n    </p>\n\n\n\n    <p>Example:</p>\n\n\n\n    <pre><code>\n\n\n\n        POST /s1/sentiment\n\n\n\n        Content-Type: application/json\n\n\n\n\n\n\n\n        {\"text\":\"There is no harm in being sometimes wrong - especially if\n\none is promptly found out.\"}\n\n\n\n    </code></pre>\n\n\n\n    <p>This is equivalent to <code>GET\n\n/s1/sentiment?text=There%20is%20no%20harm...</code></p>\n\n\n\n\n\n\n\n    <h2>Request limitations</h2>\n\n\n\n    <p>\n\n\n\n        The API has other limitations concerning the size of the HTTP\n\nrequests. The maximal allowed size of any\n\n\n\n        POST request body is <em>512 KiB</em>. For request with a URL\n\nresource, the maximal allowed number of\n\n\n\n        extracted characters from each such resource is <em>100,000</em>.\n\n\n\n    </p>\n\n\n\n\n\n\n\n    <h2>More information</h2>\n\n\n\n    <p>\n\n\n\n        <a\n\nhref=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation\n target=\"_blank\">\n\n\n\n        The Interpretor Public Documentation\n\n\n\n        </a>\n\n\n\n    </p>\n\n\n\n</div>\n",
      "title": "Geneea Natural Language Processing",
      "version": "1.0",
      "x-logo": {
        "url": "https://apis-guru.github.io/api-models/cache/geneea.com/1.0/logo.png"
      },
      "x-origin": {
        "format": "swagger",
        "url": "https://api.geneea.com/api-docs?group=s1",
        "version": "1.2"
      },
      "x-providerName": "geneea.com"
    },
    "paths": {
      "/account": {
        "get": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "getInfo",
          "operationId": "getInfo",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/AccountInfo"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Information about current user account",
          "tags": [
            "account"
          ]
        }
      },
      "/s1/correction": {
        "get": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "<br/><strong>Possible options:</strong><p class=\"markdown\">An optional parameter <code>diacritize</code> with values <code>yes</code>, <code>no</code> or <code>auto</code> indicate whether the text diacritization will be performed. The default value is <code>auto</code>.</p>",
          "operationId": "correctionGet",
          "parameters": [
            {
              "description": "raw document text",
              "in": "query",
              "name": "text",
              "required": false,
              "type": "string"
            },
            {
              "description": "document URL",
              "in": "query",
              "name": "url",
              "required": false,
              "type": "string"
            },
            {
              "description": "document extractor",
              "enum": [
                "default",
                "article",
                "keep-everything"
              ],
              "in": "query",
              "name": "extractor",
              "required": false,
              "type": "string"
            },
            {
              "description": "document language",
              "in": "query",
              "name": "language",
              "required": false,
              "type": "string"
            },
            {
              "in": "query",
              "name": "returnTextInfo",
              "required": false,
              "type": "boolean"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Response for the text correction"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs text correction (diacritization) on the given document",
          "tags": [
            "s1"
          ]
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "<strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre><br/><strong>Possible options:</strong><p class=\"markdown\">An optional parameter <code>diacritize</code> with values <code>yes</code>, <code>no</code> or <code>auto</code> indicate whether the text diacritization will be performed. The default value is <code>auto</code>.</p>",
          "operationId": "correctionPost",
          "parameters": [
            {
              "description": "request",
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/Request"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Description was not specified",
              "schema": {
                "$ref": "#/definitions/Response for the text correction"
              }
            },
            "201": {
              "description": "Created"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs text correction (diacritization) on the given document",
          "tags": [
            "s1"
          ]
        }
      },
      "/s1/entities": {
        "get": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "entitiesGet",
          "operationId": "entitiesGet",
          "parameters": [
            {
              "description": "raw document text",
              "in": "query",
              "name": "text",
              "required": false,
              "type": "string"
            },
            {
              "description": "document URL",
              "in": "query",
              "name": "url",
              "required": false,
              "type": "string"
            },
            {
              "description": "document extractor",
              "enum": [
                "default",
                "article",
                "keep-everything"
              ],
              "in": "query",
              "name": "extractor",
              "required": false,
              "type": "string"
            },
            {
              "description": "document language",
              "in": "query",
              "name": "language",
              "required": false,
              "type": "string"
            },
            {
              "in": "query",
              "name": "returnTextInfo",
              "required": false,
              "type": "boolean"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/EntitiesResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs named-entity recognition on the given document",
          "tags": [
            "s1"
          ]
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "<strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre>",
          "operationId": "entitiesPost",
          "parameters": [
            {
              "description": "request",
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/Request"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Description was not specified",
              "schema": {
                "$ref": "#/definitions/EntitiesResponse"
              }
            },
            "201": {
              "description": "Created"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs named-entity recognition on the given document",
          "tags": [
            "s1"
          ]
        }
      },
      "/s1/lemmatize": {
        "get": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "lemmatizeGet",
          "operationId": "lemmatizeGet",
          "parameters": [
            {
              "description": "raw document text",
              "in": "query",
              "name": "text",
              "required": false,
              "type": "string"
            },
            {
              "description": "document URL",
              "in": "query",
              "name": "url",
              "required": false,
              "type": "string"
            },
            {
              "description": "document extractor",
              "enum": [
                "default",
                "article",
                "keep-everything"
              ],
              "in": "query",
              "name": "extractor",
              "required": false,
              "type": "string"
            },
            {
              "description": "document language",
              "in": "query",
              "name": "language",
              "required": false,
              "type": "string"
            },
            {
              "in": "query",
              "name": "returnTextInfo",
              "required": false,
              "type": "boolean"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/LemmatizeResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs lemmatization on the given document",
          "tags": [
            "s1"
          ]
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "<strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre>",
          "operationId": "lemmatizePost",
          "parameters": [
            {
              "description": "request",
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/Request"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Description was not specified",
              "schema": {
                "$ref": "#/definitions/LemmatizeResponse"
              }
            },
            "201": {
              "description": "Created"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs lemmatization on the given document",
          "tags": [
            "s1"
          ]
        }
      },
      "/s1/sentiment": {
        "get": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "sentimentGet",
          "operationId": "sentimentGet",
          "parameters": [
            {
              "description": "raw document text",
              "in": "query",
              "name": "text",
              "required": false,
              "type": "string"
            },
            {
              "description": "document URL",
              "in": "query",
              "name": "url",
              "required": false,
              "type": "string"
            },
            {
              "description": "document extractor",
              "enum": [
                "default",
                "article",
                "keep-everything"
              ],
              "in": "query",
              "name": "extractor",
              "required": false,
              "type": "string"
            },
            {
              "description": "document language",
              "in": "query",
              "name": "language",
              "required": false,
              "type": "string"
            },
            {
              "in": "query",
              "name": "returnTextInfo",
              "required": false,
              "type": "boolean"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/SentimentResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs sentiment analysis on the given document",
          "tags": [
            "s1"
          ]
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "<strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre>",
          "operationId": "sentimentPost",
          "parameters": [
            {
              "description": "request",
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/Request"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Description was not specified",
              "schema": {
                "$ref": "#/definitions/SentimentResponse"
              }
            },
            "201": {
              "description": "Created"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs sentiment analysis on the given document",
          "tags": [
            "s1"
          ]
        }
      },
      "/s1/topic": {
        "get": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "topicGet",
          "operationId": "topicGet",
          "parameters": [
            {
              "description": "raw document text",
              "in": "query",
              "name": "text",
              "required": false,
              "type": "string"
            },
            {
              "description": "document URL",
              "in": "query",
              "name": "url",
              "required": false,
              "type": "string"
            },
            {
              "description": "document extractor",
              "enum": [
                "default",
                "article",
                "keep-everything"
              ],
              "in": "query",
              "name": "extractor",
              "required": false,
              "type": "string"
            },
            {
              "description": "document language",
              "in": "query",
              "name": "language",
              "required": false,
              "type": "string"
            },
            {
              "in": "query",
              "name": "returnTextInfo",
              "required": false,
              "type": "boolean"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/TopicResponse"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs topic detection on the given document",
          "tags": [
            "s1"
          ]
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "deprecated": false,
          "description": "<strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre>",
          "operationId": "topicPost",
          "parameters": [
            {
              "description": "request",
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/Request"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Description was not specified",
              "schema": {
                "$ref": "#/definitions/TopicResponse"
              }
            },
            "201": {
              "description": "Created"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found"
            }
          },
          "summary": "Performs topic detection on the given document",
          "tags": [
            "s1"
          ]
        }
      }
    },
    "schemes": [
      "https"
    ],
    "swagger": "2.0",
    "tags": [
      {
        "description": "Basic information about the user account.",
        "name": "account"
      },
      {
        "description": "Geneea simple REST API version 1",
        "name": "s1"
      }
    ]
  }
}