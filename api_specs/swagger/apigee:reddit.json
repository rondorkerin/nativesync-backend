{
  "type": "api",
  "key": "apigee:reddit",
  "info": {
    "title": "Reddit",
    "description": "Find the front page of the internet with Reddit API's."
  },
  "swagger": {
    "swagger": "2.0",
    "host": "www.reddit.com",
    "basePath": "/",
    "schemes": [
      "http"
    ],
    "paths": {
      "/by_id/{fullname}.{format}": {
        "parameters": [
          {
            "name": "fullname",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "A base-36 id of the form /t[0-9]+_[a-z0-9]+/ (e.g. t3_6nw57) that reddit associates with every Thing. In the example, the type prefix t3_ specifies that the fullname is for a Link, and the id 6nw57 specifies the Link's id36. (Note: the numbers according to id type are not constant, and may vary between reddit installations.)"
          },
          {
            "name": "format",
            "required": true,
            "in": "path",
            "type": "string",
            "default": "json",
            "description": "Format of the data being returned. Accepted values: json (JSON), rss (RSS feed), xml (RSS feed)",
            "enum": [
              "json",
              "rss",
              "xml"
            ]
          }
        ],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Returns information about a link given its fullname.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API"
          }
        }
      },
      "/comments/{id36}.{format}": {
        "parameters": [
          {
            "name": "id36",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "The second part of the fullname, a base-36 id of the form /t[0-9]+_[a-z0-9]+/ (e.g. t3_6nw57) that reddit associates with every Thing. In the example, the type prefix t3_ specifies that the fullname is for a Link, and the id 6nw57 specifies the Link's id36. (Note: the numbers according to id type are not constant, and may vary between reddit installations.)"
          },
          {
            "name": "format",
            "required": true,
            "in": "path",
            "type": "string",
            "default": "json",
            "description": "Format of the data being returned. Accepted values: json (JSON), rss (RSS feed), xml (RSS feed)",
            "enum": [
              "json",
              "rss",
              "xml"
            ]
          }
        ],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Returns information about a link, with comments, given its id36.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API"
          }
        }
      },
      "/api/info.{format}": {
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "type": "string",
            "default": "json",
            "description": "Format of the data being returned. Accepted values: json (JSON), xml (XML)",
            "enum": [
              "json",
              "rss",
              "xml"
            ]
          }
        ],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "url",
              "required": false,
              "in": "query",
              "description": "Format: a URL. Specify either this or id."
            },
            {
              "name": "id",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "Format: a link ID. Specify either this or url."
            },
            {
              "name": "limit",
              "required": false,
              "in": "query",
              "type": "integer",
              "description": "Presumably, limits the number of links returned. Format: a number."
            }
          ],
          "description": "Returns information about a URL's submissions.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API%3A-info.json"
          }
        }
      },
      "/api/expando": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "link_id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The link to expand."
            }
          ],
          "description": "Returns expanded link content.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/login/{username}": {
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "The username to log in as."
          }
        ],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "user",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The username to authenticate as. This is redundant, but required."
            },
            {
              "name": "passwd",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The plain-text password for the account."
            },
            {
              "name": "api_type",
              "required": true,
              "in": "query",
              "type": "string",
              "default": "json",
              "description": "Must be \"json\" for the style of auth used in this documentation."
            }
          ],
          "description": "Logs a user in. Returns a SetCookie line in the HTTP header, identifying the new session.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-login"
          }
        }
      },
      "/user/{username}/about.json": {
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "The name of the user whose \"about\" page to retrieve."
          }
        ],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Retrieves information from a user's \"about\" page, including karma totals.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API"
          }
        }
      },
      "/api/me.json": {
        "parameters": [],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Returns information about the logged-in user.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API%3A-me.json"
          }
        }
      },
      "/reddits/mine.{format}": {
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "type": "string",
            "default": "json",
            "description": "Format of the data being returned. Accepted values: json (JSON), xml (XML)",
            "enum": [
              "json",
              "rss",
              "xml"
            ]
          }
        ],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Returns information about the subreddits the currently logged-in user subscribes to.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API%3A-mine.json"
          }
        }
      },
      "/api/register": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "user",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The username to register."
            },
            {
              "name": "email",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The user's email address."
            },
            {
              "name": "passwd",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The user's password."
            },
            {
              "name": "passwd2",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The user's password, again. Has to be the same as \"passwd\"."
            },
            {
              "name": "dest",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Destination?"
            },
            {
              "name": "rem",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Format: boolean"
            },
            {
              "name": "reason",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Possible accepted values: redirect, subscribe"
            }
          ],
          "description": "Registers a new user.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/delete_user": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "areyousure1",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Verification. All three parameters must be \"yes\" to delete user successfully. Accepted values: yes, no"
            },
            {
              "name": "areyousure2",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Verification. All three parameters must be \"yes\" to delete user successfully. Accepted values: yes, no"
            },
            {
              "name": "areyousure2",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Verification. All three parameters must be \"yes\" to delete user successfully. Accepted values: yes, no"
            }
          ],
          "description": "Permanently deletes the logged-in user.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/leavemoderator": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "ID?"
            }
          ],
          "description": "Handles self-removal as moderator from a subreddit as rendered in the subreddit sidebox on any of that subreddit's pages.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/leavecontributor": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "ID?"
            }
          ],
          "description": "Handles self-removal as contributor from a subreddit as rendered in the subreddit sidebox on any of that subreddit's pages.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/password": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "name",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "A username with a valid email address."
            }
          ],
          "description": "Sends a forgot-password message to an account holder.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/resetpassword": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "reset",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Cache key?"
            },
            {
              "name": "passwd",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The new password."
            },
            {
              "name": "passwd2",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The new password, again. Must be the same as \"passwd\"."
            }
          ],
          "description": "Resets a user's password.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/submit": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "url",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "The link to submit, if the \"kind\" parameter is \"link\". Required if the story is a regular post."
            },
            {
              "name": "text",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "The text to submit, if the \"kind\" parameter is \"self\". Required if the story is a self post."
            },
            {
              "name": "kind",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Accepted values: link, self."
            },
            {
              "name": "sr",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The subreddit to submit the link to."
            },
            {
              "name": "title",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The text to appear as a link to the new story."
            },
            {
              "name": "r",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The subreddit, again. (?)"
            }
          ],
          "description": "Submits a link/story. For submitting to work, the reddit_session cookie needs to be present in the request, or the answer to a CAPTCHA must be supplied.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API"
          }
        }
      },
      "/api/share": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "parent",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The thing you want to share. See API docs for more details about things."
            },
            {
              "name": "share_from",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The name of the person who is sending the message. Maximum 100 characters."
            },
            {
              "name": "replyto",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The email address of the person who is sending the message."
            },
            {
              "name": "share_to",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The email address of the recepient of the message."
            },
            {
              "name": "message",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The text that precedes the link to the story in the message. Maximum 1000 characters."
            },
            {
              "name": "renderstyle",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "Presumably, the email format. Known accepted value: html"
            }
          ],
          "description": "Shares a link/story via email to a friend on the logged-in user's behalf. For sharing to work, the reddit_session cookie needs to be present in the request, or the answer to a CAPTCHA must be supplied.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API"
          }
        }
      },
      "/api/vote": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the thing you are voting for."
            },
            {
              "name": "dir",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The vote you are going to cast. Use 1 to vote up, 0 to rescind a vote, or -1 to vote down. Note that previous votes are not additive. If the user previously voted 1, voting -1 will change the vote to -1, not 0. Accepted values: -1 (downvote), 0 (neutral-vote), 1 (upvote)"
            }
          ],
          "description": "Casts or rescinds a vote on a story/comment.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/wiki/API%3A-vote"
          }
        }
      },
      "/api/fetch_title": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "url",
              "required": true,
              "in": "query",
              "description": "The URL to fetch the title of."
            }
          ],
          "description": "Returns the title for a story, given its URL.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/marknsfw": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the thing to mark."
            }
          ],
          "description": "Marks a thing as NSFW.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/unmarknsfw": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the thing to unmark."
            }
          ],
          "description": "Marks a thing as SFW (unmarks as NSFW)",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/save": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the post to save."
            }
          ],
          "description": "Saves a post.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-save"
          }
        }
      },
      "/api/unsave": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the post to unsave."
            }
          ],
          "description": "Unsaves a post.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-unsave"
          }
        }
      },
      "/api/hide": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the post to hide."
            }
          ],
          "description": "Hides a post.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-hide"
          }
        }
      },
      "/api/unhide": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the post to unhide."
            }
          ],
          "description": "Unhides a post.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-unhide"
          }
        }
      },
      "/api/del": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the thing to delete."
            }
          ],
          "description": "Deletes things.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/editusertext": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "thing_id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the thing to update."
            },
            {
              "name": "text",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The new text."
            }
          ],
          "description": "Updates the user text on a thing.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/remove": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The thing to remove."
            }
          ],
          "description": "Removes a thing.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/approve": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The thing to approve."
            }
          ],
          "description": "Approves a thing.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/distinguish": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The thing to distinguish."
            },
            {
              "name": "how",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Accepted values: yes, no, admin."
            }
          ],
          "description": "Distinguishes a thing.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/compose": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "to",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The recepient of the message."
            },
            {
              "name": "subject",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The subject of the message."
            },
            {
              "name": "text",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The message."
            },
            {
              "name": "captcha",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "CAPTCHA result."
            }
          ],
          "description": "Handles message composition under /message/compose",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/collapse_message": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "A list of messages to collapse."
            }
          ],
          "description": "Collapses a message.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/uncollapse_message": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "A list of messages to uncollapse."
            }
          ],
          "description": "Collapses a message.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/unread_message": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The message to mark as unread."
            }
          ],
          "description": "Mark a message as unread.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/read_message": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The message to mark as read."
            }
          ],
          "description": "Mark a message as read.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/hide_message": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The message to hide."
            }
          ],
          "description": "Hides a message.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/unhide_message": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The message to unhide."
            }
          ],
          "description": "Unhides a message.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/moremessages": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "parent_id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The message parent."
            }
          ],
          "description": "Retrieves more messages by parent.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/comment": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "parent",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the thing or comment you are commenting on."
            },
            {
              "name": "text",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The markdown content of the comment you are posting."
            }
          ],
          "description": "Posts a comment.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-comment"
          }
        }
      },
      "/api/morechildren": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "link_id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The id of the link to get the comments for."
            },
            {
              "name": "where",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Comment sorting option."
            },
            {
              "name": "children",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Children comment IDs."
            },
            {
              "name": "pv_hex",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Maximum 40 characters?"
            },
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Some kind of ID."
            }
          ],
          "description": "Retrieves more comment children.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/friend": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "name",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "The user to add as a friend."
            },
            {
              "name": "container",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Either the current user or the subreddit."
            },
            {
              "name": "type",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Accepted values: friend, moderator, contributor, banned"
            },
            {
              "name": "note",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "A \"friend note\". Maximum 300 characters."
            }
          ],
          "description": "Complement to \"unfriend\": handles friending as well as privilege changes on subreddits.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/unfriend": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "name",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "The user's name."
            },
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The user's fullname."
            },
            {
              "name": "container",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Either the current user or the subreddit."
            },
            {
              "name": "type",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Accepted values: friend, moderator, contributor, banned"
            }
          ],
          "description": "Handles removal of a friend (a user-user relation) or removal of a user's privileges from a subreddit (a user-subreddit relation).  The user can either be passed in by name (name) or by fullname (id).  'container' will either be the current user or the subreddit.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/friend_note": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "name",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "The friend to whom to associate the note with."
            },
            {
              "name": "note",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "A note. Maximum 300 characters."
            }
          ],
          "description": "Attach a note to a friend.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/update": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "curpass",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The current password of the logged-in user. Required to update any setting."
            },
            {
              "name": "email",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "A new email."
            },
            {
              "name": "newpass",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "A new password."
            },
            {
              "name": "verpass",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "A new password, again. Must be the same as \"newpass\"."
            },
            {
              "name": "verify",
              "required": false,
              "in": "query",
              "type": "boolean",
              "description": "Whether or not to send an email verification letter? Format: boolean"
            }
          ],
          "description": "Handles /prefs/update for updating email address and password.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/tb_commentspanel_show": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Turns on the preference to show comments panel.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/tb_commentspanel_hide": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Turns off the preference to show comments panel.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/site_admin": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "sr",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Subreddit."
            },
            {
              "name": "name",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Subreddit name."
            },
            {
              "name": "title",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "A title for the subreddit. Maximum 100 characters."
            },
            {
              "name": "header-title",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "A title for the subreddit for the header. Maximum 500 characters."
            },
            {
              "name": "domain",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Subreddit domain. \"Own a domain? Enter it here and then go to your DNS provider and add a CNAME record aliasing your domain to rhs.reddit.com. You will be able to access your reddit through your domain.\""
            },
            {
              "name": "description",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Subreddit description. Maximum 5120 characters."
            },
            {
              "name": "lang",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Subreddit language."
            },
            {
              "name": "over_18",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Whether or not this is a \"mature content\" subreddit; viewers must be at least 18 years old."
            },
            {
              "name": "allow_top",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Whether or not to allow this subreddit to be shown in the \"default set\"."
            },
            {
              "name": "show_media",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Whether or not to show thumbnails images of content."
            },
            {
              "name": "type",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Subreddit type. Accepted values: public (anyone can view and submit), private (only approved members can view and submit), restricted (anyone can view, but only approved members can submit)"
            },
            {
              "name": "link_type",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Subreddit content options. Accepted values: any (any link type is allowed), link (only links to external sites allowed), self (only self posts allowed)"
            },
            {
              "name": "sponsorship-text",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Sponsorship text. Maximum 500 characters."
            },
            {
              "name": "sponsorship-name",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Sponsorship name. Maximum 500 characters."
            },
            {
              "name": "sponsorship-url",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Sponsorship URL. Maximum 500 characters."
            },
            {
              "name": "css_on_cname",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Whether or not to show subreddit style while accessing the subreddit through the domain?"
            }
          ],
          "description": "Creates or updates subreddits.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/subreddit_stylesheet": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "stylesheet_contents",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The stylesheet."
            },
            {
              "name": "op",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Operation. Accepted values: save, preview"
            }
          ],
          "description": "Updates the CSS for a subreddit.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/delete_sr_img": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "img_name",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The image to delete."
            }
          ],
          "description": "Deletes a subreddit image. Called called upon requested delete on /about/stylesheet. Updates the site's image list, and causes the <li> which wraps the image to be hidden.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/delete_sr_header": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "img_name",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The image to delete."
            }
          ],
          "description": "Called when the user request that the header on a subreddit be reset.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/upload_sr_img": {
        "parameters": [],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Completely unnecessary method which exists because safari can be dumb too.  On page reload after an image has been posted in safari, the iframe to which the request posted preserves the URL of the POST, and safari attempts to execute a GET against it.  The iframe is hidden, so what it returns is completely irrelevant.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        },
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "name",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The name for the image."
            },
            {
              "name": "formid",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Form ID. Maximum 100 characters."
            },
            {
              "name": "header",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Whether or not this is a header image? Accepted values: 0, 1"
            },
            {
              "name": "sponsor",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Whether or not something is sponsored? Used by admins only. Accepted values: 0, 1"
            }
          ],
          "description": "Called on /about/stylesheet when an image needs to be replaced or uploaded, as well as on /about/edit for updating the header.  Unlike every other POST in this controller, this method does not get called with Ajax but rather is from the original form POSTing to a hidden iFrame.  Unfortunately, this means the response needs to generate an page with a script tag to fire the requisite updates to the parent document, and, more importantly, that we can't use our normal toolkit for passing those responses back. The result of this function is a rendered UploadedImage() object in charge of firing the completedUploadImage() call in JS.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/subscribe": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "action",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Accepted values: sub (subscribe), unsub (unsubscribe)"
            },
            {
              "name": "sr",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The subreddit."
            }
          ],
          "description": "Subscribes or unsubscribes the logged-in user to a subreddit.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/search_reddit_names": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "query",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The search query. Maximum 50 characters."
            }
          ],
          "description": "Searches for subreddits with the given query.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/flairlist": {
        "parameters": [],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "r",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The name of the subreddit."
            },
            {
              "name": "limit",
              "required": true,
              "in": "query",
              "type": "integer",
              "minimum": 1,
              "default": 100,
              "description": "The maximum number of items to return (up to 1000)."
            },
            {
              "name": "after",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Return entries starting after this user."
            },
            {
              "name": "before",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Return entries starting before this user."
            }
          ],
          "description": "Returns the flair assignments of a subreddit.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-flairlist"
          }
        }
      },
      "/api/flair": {
        "parameters": [],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "r",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The name of the subreddit."
            },
            {
              "name": "name",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The name of the user."
            },
            {
              "name": "text",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "The flair text to assign. Note: If an empty string is assigned to both text and css_class, then flair for the user will be removed."
            },
            {
              "name": "css_class",
              "required": false,
              "in": "query",
              "type": "string",
              "description": "The CSS class to assign to the flair text. Note: If an empty string is assigned to both text and css_class, then flair for the user will be removed."
            }
          ],
          "description": "Sets or clears a user's flair in a subreddit.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-flair"
          }
        }
      },
      "/api/flaircsv.json": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "r",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The name of the subreddit."
            },
            {
              "name": "flair_csv",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "CSV file contents, up to 100 lines."
            }
          ],
          "description": "Posts a CSV file of flair settings to a subreddit.",
          "externalDocs": {
            "url": "https://github.com/reddit/reddit/wiki/API%3A-flaircsv"
          }
        }
      },
      "/api/feedback": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "name",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "A name."
            },
            {
              "name": "email",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "An email."
            },
            {
              "name": "reason",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "A reason for feedback. Accepted values: ad_inq (advertising inquiry), feedback, i18n (internationalization)."
            },
            {
              "name": "text",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The feedback."
            }
          ],
          "description": "Sends user feedback to Reddit admins.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/report": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "The fullname of the thing to report."
            }
          ],
          "description": "Reports a thing.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/searchfeedback": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "q",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Search query. Maximum 500 characters."
            },
            {
              "name": "sort",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Sort option. Maximum 10 characters."
            },
            {
              "name": "t",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Maximum 10 characters."
            },
            {
              "name": "approval",
              "required": true,
              "in": "query",
              "type": "boolean",
              "description": "Format: boolean."
            }
          ],
          "description": "Returns search results.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/bookmarklet": {
        "parameters": [],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "what",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Action. Accepted values: like, dislike, save."
            },
            {
              "name": "u",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Array of link URLs?"
            }
          ],
          "description": "Does something with bookmarklets.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/edit_error": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "hexkey",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Maximum 32 characters."
            },
            {
              "name": "nickname",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Maximum 1000 characters."
            },
            {
              "name": "status",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "Accepted values: new, severe, interesting, normal, fixed."
            }
          ],
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/noframe": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Removes the Reddit toolbar if it is enabled in the user's preferences",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/frame": {
        "parameters": [],
        "post": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "description": "Adds the Reddit toolbar if it is disabled in the user's preferences",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      },
      "/api/gadget": {
        "parameters": [],
        "get": {
          "responses": {
            "200": {
              "description": "Successful Response"
            }
          },
          "parameters": [
            {
              "name": "type",
              "required": true,
              "in": "query",
              "type": "string",
              "default": "click",
              "description": "The type of gadget? Accepted value: click."
            },
            {
              "name": "links",
              "required": true,
              "in": "query",
              "type": "string",
              "description": "A list of links."
            }
          ],
          "description": "Something related to the \"recently viewed\" sidebar gadget.",
          "externalDocs": {
            "url": "http://github.com/reddit/reddit/blob/master/r2/r2/controllers/api.py"
          }
        }
      }
    },
    "info": {
      "title": "Reddit",
      "description": "Find the front page of the internet with Reddit API's."
    }
  },
  "public": true
}